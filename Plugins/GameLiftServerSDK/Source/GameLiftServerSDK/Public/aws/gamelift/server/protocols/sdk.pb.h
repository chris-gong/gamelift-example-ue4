// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sdk.proto

#ifndef PROTOBUF_sdk_2eproto__INCLUDED
#define PROTOBUF_sdk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace com {
namespace amazon {
namespace whitewater {
namespace auxproxy {
namespace pbuffer {
class AcceptPlayerSession;
class AcceptPlayerSessionDefaultTypeInternal;
extern AcceptPlayerSessionDefaultTypeInternal _AcceptPlayerSession_default_instance_;
class ActivateGameSession;
class ActivateGameSessionDefaultTypeInternal;
extern ActivateGameSessionDefaultTypeInternal _ActivateGameSession_default_instance_;
class AttributeValue;
class AttributeValueDefaultTypeInternal;
extern AttributeValueDefaultTypeInternal _AttributeValue_default_instance_;
class AttributeValue_SDMEntry;
class AttributeValue_SDMEntryDefaultTypeInternal;
extern AttributeValue_SDMEntryDefaultTypeInternal _AttributeValue_SDMEntry_default_instance_;
class BackfillMatchmakingRequest;
class BackfillMatchmakingRequestDefaultTypeInternal;
extern BackfillMatchmakingRequestDefaultTypeInternal _BackfillMatchmakingRequest_default_instance_;
class BackfillMatchmakingResponse;
class BackfillMatchmakingResponseDefaultTypeInternal;
extern BackfillMatchmakingResponseDefaultTypeInternal _BackfillMatchmakingResponse_default_instance_;
class DescribePlayerSessionsRequest;
class DescribePlayerSessionsRequestDefaultTypeInternal;
extern DescribePlayerSessionsRequestDefaultTypeInternal _DescribePlayerSessionsRequest_default_instance_;
class DescribePlayerSessionsResponse;
class DescribePlayerSessionsResponseDefaultTypeInternal;
extern DescribePlayerSessionsResponseDefaultTypeInternal _DescribePlayerSessionsResponse_default_instance_;
class GameLiftResponse;
class GameLiftResponseDefaultTypeInternal;
extern GameLiftResponseDefaultTypeInternal _GameLiftResponse_default_instance_;
class GameProperty;
class GamePropertyDefaultTypeInternal;
extern GamePropertyDefaultTypeInternal _GameProperty_default_instance_;
class GameSession;
class GameSessionDefaultTypeInternal;
extern GameSessionDefaultTypeInternal _GameSession_default_instance_;
class GameSessionActivate;
class GameSessionActivateDefaultTypeInternal;
extern GameSessionActivateDefaultTypeInternal _GameSessionActivate_default_instance_;
class GameSessionTerminate;
class GameSessionTerminateDefaultTypeInternal;
extern GameSessionTerminateDefaultTypeInternal _GameSessionTerminate_default_instance_;
class GetInstanceCertificate;
class GetInstanceCertificateDefaultTypeInternal;
extern GetInstanceCertificateDefaultTypeInternal _GetInstanceCertificate_default_instance_;
class GetInstanceCertificateResponse;
class GetInstanceCertificateResponseDefaultTypeInternal;
extern GetInstanceCertificateResponseDefaultTypeInternal _GetInstanceCertificateResponse_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerSession;
class PlayerSessionDefaultTypeInternal;
extern PlayerSessionDefaultTypeInternal _PlayerSession_default_instance_;
class Player_LatencyInMsEntry;
class Player_LatencyInMsEntryDefaultTypeInternal;
extern Player_LatencyInMsEntryDefaultTypeInternal _Player_LatencyInMsEntry_default_instance_;
class Player_PlayerAttributesEntry;
class Player_PlayerAttributesEntryDefaultTypeInternal;
extern Player_PlayerAttributesEntryDefaultTypeInternal _Player_PlayerAttributesEntry_default_instance_;
class ProcessEnding;
class ProcessEndingDefaultTypeInternal;
extern ProcessEndingDefaultTypeInternal _ProcessEnding_default_instance_;
class ProcessReady;
class ProcessReadyDefaultTypeInternal;
extern ProcessReadyDefaultTypeInternal _ProcessReady_default_instance_;
class RemovePlayerSession;
class RemovePlayerSessionDefaultTypeInternal;
extern RemovePlayerSessionDefaultTypeInternal _RemovePlayerSession_default_instance_;
class ReportHealth;
class ReportHealthDefaultTypeInternal;
extern ReportHealthDefaultTypeInternal _ReportHealth_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class StopMatchmakingRequest;
class StopMatchmakingRequestDefaultTypeInternal;
extern StopMatchmakingRequestDefaultTypeInternal _StopMatchmakingRequest_default_instance_;
class TerminateProcess;
class TerminateProcessDefaultTypeInternal;
extern TerminateProcessDefaultTypeInternal _TerminateProcess_default_instance_;
class UpdateGameSession;
class UpdateGameSessionDefaultTypeInternal;
extern UpdateGameSessionDefaultTypeInternal _UpdateGameSession_default_instance_;
class UpdatePlayerSessionCreationPolicy;
class UpdatePlayerSessionCreationPolicyDefaultTypeInternal;
extern UpdatePlayerSessionCreationPolicyDefaultTypeInternal _UpdatePlayerSessionCreationPolicy_default_instance_;
}  // namespace pbuffer
}  // namespace auxproxy
}  // namespace whitewater
}  // namespace amazon
}  // namespace com

namespace com {
namespace amazon {
namespace whitewater {
namespace auxproxy {
namespace pbuffer {

namespace protobuf_sdk_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_sdk_2eproto

enum Response_Status {
  Response_Status_OK = 0,
  Response_Status_ERROR = 1,
  Response_Status_Response_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Response_Status_Response_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Response_Status_IsValid(int value);
const Response_Status Response_Status_Status_MIN = Response_Status_OK;
const Response_Status Response_Status_Status_MAX = Response_Status_ERROR;
const int Response_Status_Status_ARRAYSIZE = Response_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Status_descriptor();
inline const ::std::string& Response_Status_Name(Response_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Status_descriptor(), value);
}
inline bool Response_Status_Parse(
    const ::std::string& name, Response_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Status>(
    Response_Status_descriptor(), name, value);
}
enum GameLiftResponse_Status {
  GameLiftResponse_Status_OK = 0,
  GameLiftResponse_Status_ERROR_400 = 1,
  GameLiftResponse_Status_ERROR_500 = 2,
  GameLiftResponse_Status_GameLiftResponse_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GameLiftResponse_Status_GameLiftResponse_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GameLiftResponse_Status_IsValid(int value);
const GameLiftResponse_Status GameLiftResponse_Status_Status_MIN = GameLiftResponse_Status_OK;
const GameLiftResponse_Status GameLiftResponse_Status_Status_MAX = GameLiftResponse_Status_ERROR_500;
const int GameLiftResponse_Status_Status_ARRAYSIZE = GameLiftResponse_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameLiftResponse_Status_descriptor();
inline const ::std::string& GameLiftResponse_Status_Name(GameLiftResponse_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameLiftResponse_Status_descriptor(), value);
}
inline bool GameLiftResponse_Status_Parse(
    const ::std::string& name, GameLiftResponse_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameLiftResponse_Status>(
    GameLiftResponse_Status_descriptor(), name, value);
}
// ===================================================================

class ProcessReady : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady) */ {
 public:
  ProcessReady();
  virtual ~ProcessReady();

  ProcessReady(const ProcessReady& from);

  inline ProcessReady& operator=(const ProcessReady& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessReady& default_instance();

  static inline const ProcessReady* internal_default_instance() {
    return reinterpret_cast<const ProcessReady*>(
               &_ProcessReady_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ProcessReady* other);

  // implements Message ----------------------------------------------

  inline ProcessReady* New() const PROTOBUF_FINAL { return New(NULL); }

  ProcessReady* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProcessReady& from);
  void MergeFrom(const ProcessReady& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProcessReady* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string logPathsToUpload = 1;
  int logpathstoupload_size() const;
  void clear_logpathstoupload();
  static const int kLogPathsToUploadFieldNumber = 1;
  const ::std::string& logpathstoupload(int index) const;
  ::std::string* mutable_logpathstoupload(int index);
  void set_logpathstoupload(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_logpathstoupload(int index, ::std::string&& value);
  #endif
  void set_logpathstoupload(int index, const char* value);
  void set_logpathstoupload(int index, const char* value, size_t size);
  ::std::string* add_logpathstoupload();
  void add_logpathstoupload(const ::std::string& value);
  #if LANG_CXX11
  void add_logpathstoupload(::std::string&& value);
  #endif
  void add_logpathstoupload(const char* value);
  void add_logpathstoupload(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& logpathstoupload() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_logpathstoupload();

  // int32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // int32 maxConcurrentGameSessions = 3;
  void clear_maxconcurrentgamesessions();
  static const int kMaxConcurrentGameSessionsFieldNumber = 3;
  ::google::protobuf::int32 maxconcurrentgamesessions() const;
  void set_maxconcurrentgamesessions(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> logpathstoupload_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 maxconcurrentgamesessions_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProcessEnding : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding) */ {
 public:
  ProcessEnding();
  virtual ~ProcessEnding();

  ProcessEnding(const ProcessEnding& from);

  inline ProcessEnding& operator=(const ProcessEnding& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcessEnding& default_instance();

  static inline const ProcessEnding* internal_default_instance() {
    return reinterpret_cast<const ProcessEnding*>(
               &_ProcessEnding_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ProcessEnding* other);

  // implements Message ----------------------------------------------

  inline ProcessEnding* New() const PROTOBUF_FINAL { return New(NULL); }

  ProcessEnding* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProcessEnding& from);
  void MergeFrom(const ProcessEnding& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProcessEnding* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.ProcessEnding)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameSessionActivate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate) */ {
 public:
  GameSessionActivate();
  virtual ~GameSessionActivate();

  GameSessionActivate(const GameSessionActivate& from);

  inline GameSessionActivate& operator=(const GameSessionActivate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSessionActivate& default_instance();

  static inline const GameSessionActivate* internal_default_instance() {
    return reinterpret_cast<const GameSessionActivate*>(
               &_GameSessionActivate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GameSessionActivate* other);

  // implements Message ----------------------------------------------

  inline GameSessionActivate* New() const PROTOBUF_FINAL { return New(NULL); }

  GameSessionActivate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameSessionActivate& from);
  void MergeFrom(const GameSessionActivate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameSessionActivate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gameSessionId = 1;
  void clear_gamesessionid();
  static const int kGameSessionIdFieldNumber = 1;
  const ::std::string& gamesessionid() const;
  void set_gamesessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessionid(::std::string&& value);
  #endif
  void set_gamesessionid(const char* value);
  void set_gamesessionid(const char* value, size_t size);
  ::std::string* mutable_gamesessionid();
  ::std::string* release_gamesessionid();
  void set_allocated_gamesessionid(::std::string* gamesessionid);

  // int32 maxPlayers = 2;
  void clear_maxplayers();
  static const int kMaxPlayersFieldNumber = 2;
  ::google::protobuf::int32 maxplayers() const;
  void set_maxplayers(::google::protobuf::int32 value);

  // int32 port = 3;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gamesessionid_;
  ::google::protobuf::int32 maxplayers_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameSessionTerminate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate) */ {
 public:
  GameSessionTerminate();
  virtual ~GameSessionTerminate();

  GameSessionTerminate(const GameSessionTerminate& from);

  inline GameSessionTerminate& operator=(const GameSessionTerminate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSessionTerminate& default_instance();

  static inline const GameSessionTerminate* internal_default_instance() {
    return reinterpret_cast<const GameSessionTerminate*>(
               &_GameSessionTerminate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GameSessionTerminate* other);

  // implements Message ----------------------------------------------

  inline GameSessionTerminate* New() const PROTOBUF_FINAL { return New(NULL); }

  GameSessionTerminate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameSessionTerminate& from);
  void MergeFrom(const GameSessionTerminate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameSessionTerminate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gameSessionId = 1;
  void clear_gamesessionid();
  static const int kGameSessionIdFieldNumber = 1;
  const ::std::string& gamesessionid() const;
  void set_gamesessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessionid(::std::string&& value);
  #endif
  void set_gamesessionid(const char* value);
  void set_gamesessionid(const char* value, size_t size);
  ::std::string* mutable_gamesessionid();
  ::std::string* release_gamesessionid();
  void set_allocated_gamesessionid(::std::string* gamesessionid);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gamesessionid_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdatePlayerSessionCreationPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy) */ {
 public:
  UpdatePlayerSessionCreationPolicy();
  virtual ~UpdatePlayerSessionCreationPolicy();

  UpdatePlayerSessionCreationPolicy(const UpdatePlayerSessionCreationPolicy& from);

  inline UpdatePlayerSessionCreationPolicy& operator=(const UpdatePlayerSessionCreationPolicy& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePlayerSessionCreationPolicy& default_instance();

  static inline const UpdatePlayerSessionCreationPolicy* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerSessionCreationPolicy*>(
               &_UpdatePlayerSessionCreationPolicy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(UpdatePlayerSessionCreationPolicy* other);

  // implements Message ----------------------------------------------

  inline UpdatePlayerSessionCreationPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdatePlayerSessionCreationPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdatePlayerSessionCreationPolicy& from);
  void MergeFrom(const UpdatePlayerSessionCreationPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdatePlayerSessionCreationPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gameSessionId = 1;
  void clear_gamesessionid();
  static const int kGameSessionIdFieldNumber = 1;
  const ::std::string& gamesessionid() const;
  void set_gamesessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessionid(::std::string&& value);
  #endif
  void set_gamesessionid(const char* value);
  void set_gamesessionid(const char* value, size_t size);
  ::std::string* mutable_gamesessionid();
  ::std::string* release_gamesessionid();
  void set_allocated_gamesessionid(::std::string* gamesessionid);

  // string newPlayerSessionCreationPolicy = 2;
  void clear_newplayersessioncreationpolicy();
  static const int kNewPlayerSessionCreationPolicyFieldNumber = 2;
  const ::std::string& newplayersessioncreationpolicy() const;
  void set_newplayersessioncreationpolicy(const ::std::string& value);
  #if LANG_CXX11
  void set_newplayersessioncreationpolicy(::std::string&& value);
  #endif
  void set_newplayersessioncreationpolicy(const char* value);
  void set_newplayersessioncreationpolicy(const char* value, size_t size);
  ::std::string* mutable_newplayersessioncreationpolicy();
  ::std::string* release_newplayersessioncreationpolicy();
  void set_allocated_newplayersessioncreationpolicy(::std::string* newplayersessioncreationpolicy);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gamesessionid_;
  ::google::protobuf::internal::ArenaStringPtr newplayersessioncreationpolicy_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AcceptPlayerSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession) */ {
 public:
  AcceptPlayerSession();
  virtual ~AcceptPlayerSession();

  AcceptPlayerSession(const AcceptPlayerSession& from);

  inline AcceptPlayerSession& operator=(const AcceptPlayerSession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptPlayerSession& default_instance();

  static inline const AcceptPlayerSession* internal_default_instance() {
    return reinterpret_cast<const AcceptPlayerSession*>(
               &_AcceptPlayerSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AcceptPlayerSession* other);

  // implements Message ----------------------------------------------

  inline AcceptPlayerSession* New() const PROTOBUF_FINAL { return New(NULL); }

  AcceptPlayerSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcceptPlayerSession& from);
  void MergeFrom(const AcceptPlayerSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcceptPlayerSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gameSessionId = 1;
  void clear_gamesessionid();
  static const int kGameSessionIdFieldNumber = 1;
  const ::std::string& gamesessionid() const;
  void set_gamesessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessionid(::std::string&& value);
  #endif
  void set_gamesessionid(const char* value);
  void set_gamesessionid(const char* value, size_t size);
  ::std::string* mutable_gamesessionid();
  ::std::string* release_gamesessionid();
  void set_allocated_gamesessionid(::std::string* gamesessionid);

  // string playerSessionId = 2;
  void clear_playersessionid();
  static const int kPlayerSessionIdFieldNumber = 2;
  const ::std::string& playersessionid() const;
  void set_playersessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_playersessionid(::std::string&& value);
  #endif
  void set_playersessionid(const char* value);
  void set_playersessionid(const char* value, size_t size);
  ::std::string* mutable_playersessionid();
  ::std::string* release_playersessionid();
  void set_allocated_playersessionid(::std::string* playersessionid);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gamesessionid_;
  ::google::protobuf::internal::ArenaStringPtr playersessionid_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemovePlayerSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession) */ {
 public:
  RemovePlayerSession();
  virtual ~RemovePlayerSession();

  RemovePlayerSession(const RemovePlayerSession& from);

  inline RemovePlayerSession& operator=(const RemovePlayerSession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemovePlayerSession& default_instance();

  static inline const RemovePlayerSession* internal_default_instance() {
    return reinterpret_cast<const RemovePlayerSession*>(
               &_RemovePlayerSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(RemovePlayerSession* other);

  // implements Message ----------------------------------------------

  inline RemovePlayerSession* New() const PROTOBUF_FINAL { return New(NULL); }

  RemovePlayerSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemovePlayerSession& from);
  void MergeFrom(const RemovePlayerSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemovePlayerSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gameSessionId = 1;
  void clear_gamesessionid();
  static const int kGameSessionIdFieldNumber = 1;
  const ::std::string& gamesessionid() const;
  void set_gamesessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessionid(::std::string&& value);
  #endif
  void set_gamesessionid(const char* value);
  void set_gamesessionid(const char* value, size_t size);
  ::std::string* mutable_gamesessionid();
  ::std::string* release_gamesessionid();
  void set_allocated_gamesessionid(::std::string* gamesessionid);

  // string playerSessionId = 2;
  void clear_playersessionid();
  static const int kPlayerSessionIdFieldNumber = 2;
  const ::std::string& playersessionid() const;
  void set_playersessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_playersessionid(::std::string&& value);
  #endif
  void set_playersessionid(const char* value);
  void set_playersessionid(const char* value, size_t size);
  ::std::string* mutable_playersessionid();
  ::std::string* release_playersessionid();
  void set_allocated_playersessionid(::std::string* playersessionid);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gamesessionid_;
  ::google::protobuf::internal::ArenaStringPtr playersessionid_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReportHealth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth) */ {
 public:
  ReportHealth();
  virtual ~ReportHealth();

  ReportHealth(const ReportHealth& from);

  inline ReportHealth& operator=(const ReportHealth& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportHealth& default_instance();

  static inline const ReportHealth* internal_default_instance() {
    return reinterpret_cast<const ReportHealth*>(
               &_ReportHealth_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ReportHealth* other);

  // implements Message ----------------------------------------------

  inline ReportHealth* New() const PROTOBUF_FINAL { return New(NULL); }

  ReportHealth* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReportHealth& from);
  void MergeFrom(const ReportHealth& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReportHealth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool healthStatus = 1;
  void clear_healthstatus();
  static const int kHealthStatusFieldNumber = 1;
  bool healthstatus() const;
  void set_healthstatus(bool value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool healthstatus_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DescribePlayerSessionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest) */ {
 public:
  DescribePlayerSessionsRequest();
  virtual ~DescribePlayerSessionsRequest();

  DescribePlayerSessionsRequest(const DescribePlayerSessionsRequest& from);

  inline DescribePlayerSessionsRequest& operator=(const DescribePlayerSessionsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DescribePlayerSessionsRequest& default_instance();

  static inline const DescribePlayerSessionsRequest* internal_default_instance() {
    return reinterpret_cast<const DescribePlayerSessionsRequest*>(
               &_DescribePlayerSessionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DescribePlayerSessionsRequest* other);

  // implements Message ----------------------------------------------

  inline DescribePlayerSessionsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DescribePlayerSessionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DescribePlayerSessionsRequest& from);
  void MergeFrom(const DescribePlayerSessionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DescribePlayerSessionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string gameSessionId = 1;
  void clear_gamesessionid();
  static const int kGameSessionIdFieldNumber = 1;
  const ::std::string& gamesessionid() const;
  void set_gamesessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessionid(::std::string&& value);
  #endif
  void set_gamesessionid(const char* value);
  void set_gamesessionid(const char* value, size_t size);
  ::std::string* mutable_gamesessionid();
  ::std::string* release_gamesessionid();
  void set_allocated_gamesessionid(::std::string* gamesessionid);

  // string playerId = 2;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string playerSessionId = 3;
  void clear_playersessionid();
  static const int kPlayerSessionIdFieldNumber = 3;
  const ::std::string& playersessionid() const;
  void set_playersessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_playersessionid(::std::string&& value);
  #endif
  void set_playersessionid(const char* value);
  void set_playersessionid(const char* value, size_t size);
  ::std::string* mutable_playersessionid();
  ::std::string* release_playersessionid();
  void set_allocated_playersessionid(::std::string* playersessionid);

  // string playerSessionStatusFilter = 4;
  void clear_playersessionstatusfilter();
  static const int kPlayerSessionStatusFilterFieldNumber = 4;
  const ::std::string& playersessionstatusfilter() const;
  void set_playersessionstatusfilter(const ::std::string& value);
  #if LANG_CXX11
  void set_playersessionstatusfilter(::std::string&& value);
  #endif
  void set_playersessionstatusfilter(const char* value);
  void set_playersessionstatusfilter(const char* value, size_t size);
  ::std::string* mutable_playersessionstatusfilter();
  ::std::string* release_playersessionstatusfilter();
  void set_allocated_playersessionstatusfilter(::std::string* playersessionstatusfilter);

  // string nextToken = 5;
  void clear_nexttoken();
  static const int kNextTokenFieldNumber = 5;
  const ::std::string& nexttoken() const;
  void set_nexttoken(const ::std::string& value);
  #if LANG_CXX11
  void set_nexttoken(::std::string&& value);
  #endif
  void set_nexttoken(const char* value);
  void set_nexttoken(const char* value, size_t size);
  ::std::string* mutable_nexttoken();
  ::std::string* release_nexttoken();
  void set_allocated_nexttoken(::std::string* nexttoken);

  // int32 limit = 6;
  void clear_limit();
  static const int kLimitFieldNumber = 6;
  ::google::protobuf::int32 limit() const;
  void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr gamesessionid_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr playersessionid_;
  ::google::protobuf::internal::ArenaStringPtr playersessionstatusfilter_;
  ::google::protobuf::internal::ArenaStringPtr nexttoken_;
  ::google::protobuf::int32 limit_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackfillMatchmakingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest) */ {
 public:
  BackfillMatchmakingRequest();
  virtual ~BackfillMatchmakingRequest();

  BackfillMatchmakingRequest(const BackfillMatchmakingRequest& from);

  inline BackfillMatchmakingRequest& operator=(const BackfillMatchmakingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackfillMatchmakingRequest& default_instance();

  static inline const BackfillMatchmakingRequest* internal_default_instance() {
    return reinterpret_cast<const BackfillMatchmakingRequest*>(
               &_BackfillMatchmakingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(BackfillMatchmakingRequest* other);

  // implements Message ----------------------------------------------

  inline BackfillMatchmakingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BackfillMatchmakingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackfillMatchmakingRequest& from);
  void MergeFrom(const BackfillMatchmakingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackfillMatchmakingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 4;
  const ::com::amazon::whitewater::auxproxy::pbuffer::Player& players(int index) const;
  ::com::amazon::whitewater::auxproxy::pbuffer::Player* mutable_players(int index);
  ::com::amazon::whitewater::auxproxy::pbuffer::Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::Player >&
      players() const;

  // string ticketId = 1;
  void clear_ticketid();
  static const int kTicketIdFieldNumber = 1;
  const ::std::string& ticketid() const;
  void set_ticketid(const ::std::string& value);
  #if LANG_CXX11
  void set_ticketid(::std::string&& value);
  #endif
  void set_ticketid(const char* value);
  void set_ticketid(const char* value, size_t size);
  ::std::string* mutable_ticketid();
  ::std::string* release_ticketid();
  void set_allocated_ticketid(::std::string* ticketid);

  // string gameSessionArn = 2;
  void clear_gamesessionarn();
  static const int kGameSessionArnFieldNumber = 2;
  const ::std::string& gamesessionarn() const;
  void set_gamesessionarn(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessionarn(::std::string&& value);
  #endif
  void set_gamesessionarn(const char* value);
  void set_gamesessionarn(const char* value, size_t size);
  ::std::string* mutable_gamesessionarn();
  ::std::string* release_gamesessionarn();
  void set_allocated_gamesessionarn(::std::string* gamesessionarn);

  // string matchmakingConfigurationArn = 3;
  void clear_matchmakingconfigurationarn();
  static const int kMatchmakingConfigurationArnFieldNumber = 3;
  const ::std::string& matchmakingconfigurationarn() const;
  void set_matchmakingconfigurationarn(const ::std::string& value);
  #if LANG_CXX11
  void set_matchmakingconfigurationarn(::std::string&& value);
  #endif
  void set_matchmakingconfigurationarn(const char* value);
  void set_matchmakingconfigurationarn(const char* value, size_t size);
  ::std::string* mutable_matchmakingconfigurationarn();
  ::std::string* release_matchmakingconfigurationarn();
  void set_allocated_matchmakingconfigurationarn(::std::string* matchmakingconfigurationarn);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::Player > players_;
  ::google::protobuf::internal::ArenaStringPtr ticketid_;
  ::google::protobuf::internal::ArenaStringPtr gamesessionarn_;
  ::google::protobuf::internal::ArenaStringPtr matchmakingconfigurationarn_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopMatchmakingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest) */ {
 public:
  StopMatchmakingRequest();
  virtual ~StopMatchmakingRequest();

  StopMatchmakingRequest(const StopMatchmakingRequest& from);

  inline StopMatchmakingRequest& operator=(const StopMatchmakingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopMatchmakingRequest& default_instance();

  static inline const StopMatchmakingRequest* internal_default_instance() {
    return reinterpret_cast<const StopMatchmakingRequest*>(
               &_StopMatchmakingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(StopMatchmakingRequest* other);

  // implements Message ----------------------------------------------

  inline StopMatchmakingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StopMatchmakingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StopMatchmakingRequest& from);
  void MergeFrom(const StopMatchmakingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StopMatchmakingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ticketId = 1;
  void clear_ticketid();
  static const int kTicketIdFieldNumber = 1;
  const ::std::string& ticketid() const;
  void set_ticketid(const ::std::string& value);
  #if LANG_CXX11
  void set_ticketid(::std::string&& value);
  #endif
  void set_ticketid(const char* value);
  void set_ticketid(const char* value, size_t size);
  ::std::string* mutable_ticketid();
  ::std::string* release_ticketid();
  void set_allocated_ticketid(::std::string* ticketid);

  // string gameSessionArn = 2;
  void clear_gamesessionarn();
  static const int kGameSessionArnFieldNumber = 2;
  const ::std::string& gamesessionarn() const;
  void set_gamesessionarn(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessionarn(::std::string&& value);
  #endif
  void set_gamesessionarn(const char* value);
  void set_gamesessionarn(const char* value, size_t size);
  ::std::string* mutable_gamesessionarn();
  ::std::string* release_gamesessionarn();
  void set_allocated_gamesessionarn(::std::string* gamesessionarn);

  // string matchmakingConfigurationArn = 3;
  void clear_matchmakingconfigurationarn();
  static const int kMatchmakingConfigurationArnFieldNumber = 3;
  const ::std::string& matchmakingconfigurationarn() const;
  void set_matchmakingconfigurationarn(const ::std::string& value);
  #if LANG_CXX11
  void set_matchmakingconfigurationarn(::std::string&& value);
  #endif
  void set_matchmakingconfigurationarn(const char* value);
  void set_matchmakingconfigurationarn(const char* value, size_t size);
  ::std::string* mutable_matchmakingconfigurationarn();
  ::std::string* release_matchmakingconfigurationarn();
  void set_allocated_matchmakingconfigurationarn(::std::string* matchmakingconfigurationarn);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ticketid_;
  ::google::protobuf::internal::ArenaStringPtr gamesessionarn_;
  ::google::protobuf::internal::ArenaStringPtr matchmakingconfigurationarn_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInstanceCertificate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate) */ {
 public:
  GetInstanceCertificate();
  virtual ~GetInstanceCertificate();

  GetInstanceCertificate(const GetInstanceCertificate& from);

  inline GetInstanceCertificate& operator=(const GetInstanceCertificate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInstanceCertificate& default_instance();

  static inline const GetInstanceCertificate* internal_default_instance() {
    return reinterpret_cast<const GetInstanceCertificate*>(
               &_GetInstanceCertificate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GetInstanceCertificate* other);

  // implements Message ----------------------------------------------

  inline GetInstanceCertificate* New() const PROTOBUF_FINAL { return New(NULL); }

  GetInstanceCertificate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetInstanceCertificate& from);
  void MergeFrom(const GetInstanceCertificate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetInstanceCertificate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActivateGameSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession) */ {
 public:
  ActivateGameSession();
  virtual ~ActivateGameSession();

  ActivateGameSession(const ActivateGameSession& from);

  inline ActivateGameSession& operator=(const ActivateGameSession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivateGameSession& default_instance();

  static inline const ActivateGameSession* internal_default_instance() {
    return reinterpret_cast<const ActivateGameSession*>(
               &_ActivateGameSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ActivateGameSession* other);

  // implements Message ----------------------------------------------

  inline ActivateGameSession* New() const PROTOBUF_FINAL { return New(NULL); }

  ActivateGameSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ActivateGameSession& from);
  void MergeFrom(const ActivateGameSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ActivateGameSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  bool has_gamesession() const;
  void clear_gamesession();
  static const int kGameSessionFieldNumber = 1;
  const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& gamesession() const;
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* mutable_gamesession();
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* release_gamesession();
  void set_allocated_gamesession(::com::amazon::whitewater::auxproxy::pbuffer::GameSession* gamesession);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* gamesession_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TerminateProcess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess) */ {
 public:
  TerminateProcess();
  virtual ~TerminateProcess();

  TerminateProcess(const TerminateProcess& from);

  inline TerminateProcess& operator=(const TerminateProcess& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TerminateProcess& default_instance();

  static inline const TerminateProcess* internal_default_instance() {
    return reinterpret_cast<const TerminateProcess*>(
               &_TerminateProcess_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(TerminateProcess* other);

  // implements Message ----------------------------------------------

  inline TerminateProcess* New() const PROTOBUF_FINAL { return New(NULL); }

  TerminateProcess* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TerminateProcess& from);
  void MergeFrom(const TerminateProcess& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TerminateProcess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 terminationTime = 1;
  void clear_terminationtime();
  static const int kTerminationTimeFieldNumber = 1;
  ::google::protobuf::int64 terminationtime() const;
  void set_terminationtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 terminationtime_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DescribePlayerSessionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse) */ {
 public:
  DescribePlayerSessionsResponse();
  virtual ~DescribePlayerSessionsResponse();

  DescribePlayerSessionsResponse(const DescribePlayerSessionsResponse& from);

  inline DescribePlayerSessionsResponse& operator=(const DescribePlayerSessionsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DescribePlayerSessionsResponse& default_instance();

  static inline const DescribePlayerSessionsResponse* internal_default_instance() {
    return reinterpret_cast<const DescribePlayerSessionsResponse*>(
               &_DescribePlayerSessionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(DescribePlayerSessionsResponse* other);

  // implements Message ----------------------------------------------

  inline DescribePlayerSessionsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DescribePlayerSessionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DescribePlayerSessionsResponse& from);
  void MergeFrom(const DescribePlayerSessionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DescribePlayerSessionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
  int playersessions_size() const;
  void clear_playersessions();
  static const int kPlayerSessionsFieldNumber = 2;
  const ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession& playersessions(int index) const;
  ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession* mutable_playersessions(int index);
  ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession* add_playersessions();
  ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >*
      mutable_playersessions();
  const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >&
      playersessions() const;

  // string nextToken = 1;
  void clear_nexttoken();
  static const int kNextTokenFieldNumber = 1;
  const ::std::string& nexttoken() const;
  void set_nexttoken(const ::std::string& value);
  #if LANG_CXX11
  void set_nexttoken(::std::string&& value);
  #endif
  void set_nexttoken(const char* value);
  void set_nexttoken(const char* value, size_t size);
  ::std::string* mutable_nexttoken();
  ::std::string* release_nexttoken();
  void set_allocated_nexttoken(::std::string* nexttoken);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession > playersessions_;
  ::google::protobuf::internal::ArenaStringPtr nexttoken_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateGameSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession) */ {
 public:
  UpdateGameSession();
  virtual ~UpdateGameSession();

  UpdateGameSession(const UpdateGameSession& from);

  inline UpdateGameSession& operator=(const UpdateGameSession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateGameSession& default_instance();

  static inline const UpdateGameSession* internal_default_instance() {
    return reinterpret_cast<const UpdateGameSession*>(
               &_UpdateGameSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(UpdateGameSession* other);

  // implements Message ----------------------------------------------

  inline UpdateGameSession* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateGameSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateGameSession& from);
  void MergeFrom(const UpdateGameSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateGameSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string updateReason = 2;
  void clear_updatereason();
  static const int kUpdateReasonFieldNumber = 2;
  const ::std::string& updatereason() const;
  void set_updatereason(const ::std::string& value);
  #if LANG_CXX11
  void set_updatereason(::std::string&& value);
  #endif
  void set_updatereason(const char* value);
  void set_updatereason(const char* value, size_t size);
  ::std::string* mutable_updatereason();
  ::std::string* release_updatereason();
  void set_allocated_updatereason(::std::string* updatereason);

  // string backfillTicketId = 3;
  void clear_backfillticketid();
  static const int kBackfillTicketIdFieldNumber = 3;
  const ::std::string& backfillticketid() const;
  void set_backfillticketid(const ::std::string& value);
  #if LANG_CXX11
  void set_backfillticketid(::std::string&& value);
  #endif
  void set_backfillticketid(const char* value);
  void set_backfillticketid(const char* value, size_t size);
  ::std::string* mutable_backfillticketid();
  ::std::string* release_backfillticketid();
  void set_allocated_backfillticketid(::std::string* backfillticketid);

  // .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
  bool has_gamesession() const;
  void clear_gamesession();
  static const int kGameSessionFieldNumber = 1;
  const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& gamesession() const;
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* mutable_gamesession();
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* release_gamesession();
  void set_allocated_gamesession(::com::amazon::whitewater::auxproxy::pbuffer::GameSession* gamesession);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr updatereason_;
  ::google::protobuf::internal::ArenaStringPtr backfillticketid_;
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* gamesession_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetInstanceCertificateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse) */ {
 public:
  GetInstanceCertificateResponse();
  virtual ~GetInstanceCertificateResponse();

  GetInstanceCertificateResponse(const GetInstanceCertificateResponse& from);

  inline GetInstanceCertificateResponse& operator=(const GetInstanceCertificateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInstanceCertificateResponse& default_instance();

  static inline const GetInstanceCertificateResponse* internal_default_instance() {
    return reinterpret_cast<const GetInstanceCertificateResponse*>(
               &_GetInstanceCertificateResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GetInstanceCertificateResponse* other);

  // implements Message ----------------------------------------------

  inline GetInstanceCertificateResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetInstanceCertificateResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetInstanceCertificateResponse& from);
  void MergeFrom(const GetInstanceCertificateResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetInstanceCertificateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string certificatePath = 1;
  void clear_certificatepath();
  static const int kCertificatePathFieldNumber = 1;
  const ::std::string& certificatepath() const;
  void set_certificatepath(const ::std::string& value);
  #if LANG_CXX11
  void set_certificatepath(::std::string&& value);
  #endif
  void set_certificatepath(const char* value);
  void set_certificatepath(const char* value, size_t size);
  ::std::string* mutable_certificatepath();
  ::std::string* release_certificatepath();
  void set_allocated_certificatepath(::std::string* certificatepath);

  // string certificateChainPath = 2;
  void clear_certificatechainpath();
  static const int kCertificateChainPathFieldNumber = 2;
  const ::std::string& certificatechainpath() const;
  void set_certificatechainpath(const ::std::string& value);
  #if LANG_CXX11
  void set_certificatechainpath(::std::string&& value);
  #endif
  void set_certificatechainpath(const char* value);
  void set_certificatechainpath(const char* value, size_t size);
  ::std::string* mutable_certificatechainpath();
  ::std::string* release_certificatechainpath();
  void set_allocated_certificatechainpath(::std::string* certificatechainpath);

  // string privateKeyPath = 3;
  void clear_privatekeypath();
  static const int kPrivateKeyPathFieldNumber = 3;
  const ::std::string& privatekeypath() const;
  void set_privatekeypath(const ::std::string& value);
  #if LANG_CXX11
  void set_privatekeypath(::std::string&& value);
  #endif
  void set_privatekeypath(const char* value);
  void set_privatekeypath(const char* value, size_t size);
  ::std::string* mutable_privatekeypath();
  ::std::string* release_privatekeypath();
  void set_allocated_privatekeypath(::std::string* privatekeypath);

  // string hostName = 4;
  void clear_hostname();
  static const int kHostNameFieldNumber = 4;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // string rootCertificatePath = 5;
  void clear_rootcertificatepath();
  static const int kRootCertificatePathFieldNumber = 5;
  const ::std::string& rootcertificatepath() const;
  void set_rootcertificatepath(const ::std::string& value);
  #if LANG_CXX11
  void set_rootcertificatepath(::std::string&& value);
  #endif
  void set_rootcertificatepath(const char* value);
  void set_rootcertificatepath(const char* value, size_t size);
  ::std::string* mutable_rootcertificatepath();
  ::std::string* release_rootcertificatepath();
  void set_allocated_rootcertificatepath(::std::string* rootcertificatepath);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr certificatepath_;
  ::google::protobuf::internal::ArenaStringPtr certificatechainpath_;
  ::google::protobuf::internal::ArenaStringPtr privatekeypath_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr rootcertificatepath_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BackfillMatchmakingResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse) */ {
 public:
  BackfillMatchmakingResponse();
  virtual ~BackfillMatchmakingResponse();

  BackfillMatchmakingResponse(const BackfillMatchmakingResponse& from);

  inline BackfillMatchmakingResponse& operator=(const BackfillMatchmakingResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackfillMatchmakingResponse& default_instance();

  static inline const BackfillMatchmakingResponse* internal_default_instance() {
    return reinterpret_cast<const BackfillMatchmakingResponse*>(
               &_BackfillMatchmakingResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(BackfillMatchmakingResponse* other);

  // implements Message ----------------------------------------------

  inline BackfillMatchmakingResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BackfillMatchmakingResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BackfillMatchmakingResponse& from);
  void MergeFrom(const BackfillMatchmakingResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BackfillMatchmakingResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ticketId = 1;
  void clear_ticketid();
  static const int kTicketIdFieldNumber = 1;
  const ::std::string& ticketid() const;
  void set_ticketid(const ::std::string& value);
  #if LANG_CXX11
  void set_ticketid(::std::string&& value);
  #endif
  void set_ticketid(const char* value);
  void set_ticketid(const char* value, size_t size);
  ::std::string* mutable_ticketid();
  ::std::string* release_ticketid();
  void set_allocated_ticketid(::std::string* ticketid);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ticketid_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Response_Status Status;
  static const Status OK =
    Response_Status_OK;
  static const Status ERROR =
    Response_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return Response_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Response_Status_Status_MIN;
  static const Status Status_MAX =
    Response_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Response_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Response_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Response_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Response_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string errorMessage = 2;
  void clear_errormessage();
  static const int kErrorMessageFieldNumber = 2;
  const ::std::string& errormessage() const;
  void set_errormessage(const ::std::string& value);
  #if LANG_CXX11
  void set_errormessage(::std::string&& value);
  #endif
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  ::std::string* mutable_errormessage();
  ::std::string* release_errormessage();
  void set_allocated_errormessage(::std::string* errormessage);

  // .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status status() const;
  void set_status(::com::amazon::whitewater::auxproxy::pbuffer::Response_Status value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errormessage_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameLiftResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse) */ {
 public:
  GameLiftResponse();
  virtual ~GameLiftResponse();

  GameLiftResponse(const GameLiftResponse& from);

  inline GameLiftResponse& operator=(const GameLiftResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameLiftResponse& default_instance();

  static inline const GameLiftResponse* internal_default_instance() {
    return reinterpret_cast<const GameLiftResponse*>(
               &_GameLiftResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(GameLiftResponse* other);

  // implements Message ----------------------------------------------

  inline GameLiftResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GameLiftResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameLiftResponse& from);
  void MergeFrom(const GameLiftResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameLiftResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GameLiftResponse_Status Status;
  static const Status OK =
    GameLiftResponse_Status_OK;
  static const Status ERROR_400 =
    GameLiftResponse_Status_ERROR_400;
  static const Status ERROR_500 =
    GameLiftResponse_Status_ERROR_500;
  static inline bool Status_IsValid(int value) {
    return GameLiftResponse_Status_IsValid(value);
  }
  static const Status Status_MIN =
    GameLiftResponse_Status_Status_MIN;
  static const Status Status_MAX =
    GameLiftResponse_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    GameLiftResponse_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return GameLiftResponse_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return GameLiftResponse_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return GameLiftResponse_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string responseData = 2;
  void clear_responsedata();
  static const int kResponseDataFieldNumber = 2;
  const ::std::string& responsedata() const;
  void set_responsedata(const ::std::string& value);
  #if LANG_CXX11
  void set_responsedata(::std::string&& value);
  #endif
  void set_responsedata(const char* value);
  void set_responsedata(const char* value, size_t size);
  ::std::string* mutable_responsedata();
  ::std::string* release_responsedata();
  void set_allocated_responsedata(::std::string* responsedata);

  // string errorMessage = 3;
  void clear_errormessage();
  static const int kErrorMessageFieldNumber = 3;
  const ::std::string& errormessage() const;
  void set_errormessage(const ::std::string& value);
  #if LANG_CXX11
  void set_errormessage(::std::string&& value);
  #endif
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  ::std::string* mutable_errormessage();
  ::std::string* release_errormessage();
  void set_allocated_errormessage(::std::string* errormessage);

  // .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status status() const;
  void set_status(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr responsedata_;
  ::google::protobuf::internal::ArenaStringPtr errormessage_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.GameSession) */ {
 public:
  GameSession();
  virtual ~GameSession();

  GameSession(const GameSession& from);

  inline GameSession& operator=(const GameSession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSession& default_instance();

  static inline const GameSession* internal_default_instance() {
    return reinterpret_cast<const GameSession*>(
               &_GameSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GameSession* other);

  // implements Message ----------------------------------------------

  inline GameSession* New() const PROTOBUF_FINAL { return New(NULL); }

  GameSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameSession& from);
  void MergeFrom(const GameSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
  int gameproperties_size() const;
  void clear_gameproperties();
  static const int kGamePropertiesFieldNumber = 6;
  const ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty& gameproperties(int index) const;
  ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty* mutable_gameproperties(int index);
  ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty* add_gameproperties();
  ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >*
      mutable_gameproperties();
  const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >&
      gameproperties() const;

  // string gameSessionId = 1;
  void clear_gamesessionid();
  static const int kGameSessionIdFieldNumber = 1;
  const ::std::string& gamesessionid() const;
  void set_gamesessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessionid(::std::string&& value);
  #endif
  void set_gamesessionid(const char* value);
  void set_gamesessionid(const char* value, size_t size);
  ::std::string* mutable_gamesessionid();
  ::std::string* release_gamesessionid();
  void set_allocated_gamesessionid(::std::string* gamesessionid);

  // string fleetId = 2;
  void clear_fleetid();
  static const int kFleetIdFieldNumber = 2;
  const ::std::string& fleetid() const;
  void set_fleetid(const ::std::string& value);
  #if LANG_CXX11
  void set_fleetid(::std::string&& value);
  #endif
  void set_fleetid(const char* value);
  void set_fleetid(const char* value, size_t size);
  ::std::string* mutable_fleetid();
  ::std::string* release_fleetid();
  void set_allocated_fleetid(::std::string* fleetid);

  // string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string ipAddress = 7;
  void clear_ipaddress();
  static const int kIpAddressFieldNumber = 7;
  const ::std::string& ipaddress() const;
  void set_ipaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddress(::std::string&& value);
  #endif
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  ::std::string* mutable_ipaddress();
  ::std::string* release_ipaddress();
  void set_allocated_ipaddress(::std::string* ipaddress);

  // string gameSessionData = 9;
  void clear_gamesessiondata();
  static const int kGameSessionDataFieldNumber = 9;
  const ::std::string& gamesessiondata() const;
  void set_gamesessiondata(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessiondata(::std::string&& value);
  #endif
  void set_gamesessiondata(const char* value);
  void set_gamesessiondata(const char* value, size_t size);
  ::std::string* mutable_gamesessiondata();
  ::std::string* release_gamesessiondata();
  void set_allocated_gamesessiondata(::std::string* gamesessiondata);

  // string matchmakerData = 10;
  void clear_matchmakerdata();
  static const int kMatchmakerDataFieldNumber = 10;
  const ::std::string& matchmakerdata() const;
  void set_matchmakerdata(const ::std::string& value);
  #if LANG_CXX11
  void set_matchmakerdata(::std::string&& value);
  #endif
  void set_matchmakerdata(const char* value);
  void set_matchmakerdata(const char* value, size_t size);
  ::std::string* mutable_matchmakerdata();
  ::std::string* release_matchmakerdata();
  void set_allocated_matchmakerdata(::std::string* matchmakerdata);

  // string dnsName = 11;
  void clear_dnsname();
  static const int kDnsNameFieldNumber = 11;
  const ::std::string& dnsname() const;
  void set_dnsname(const ::std::string& value);
  #if LANG_CXX11
  void set_dnsname(::std::string&& value);
  #endif
  void set_dnsname(const char* value);
  void set_dnsname(const char* value, size_t size);
  ::std::string* mutable_dnsname();
  ::std::string* release_dnsname();
  void set_allocated_dnsname(::std::string* dnsname);

  // int32 maxPlayers = 4;
  void clear_maxplayers();
  static const int kMaxPlayersFieldNumber = 4;
  ::google::protobuf::int32 maxplayers() const;
  void set_maxplayers(::google::protobuf::int32 value);

  // bool joinable = 5;
  void clear_joinable();
  static const int kJoinableFieldNumber = 5;
  bool joinable() const;
  void set_joinable(bool value);

  // int32 port = 8;
  void clear_port();
  static const int kPortFieldNumber = 8;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.GameSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty > gameproperties_;
  ::google::protobuf::internal::ArenaStringPtr gamesessionid_;
  ::google::protobuf::internal::ArenaStringPtr fleetid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ipaddress_;
  ::google::protobuf::internal::ArenaStringPtr gamesessiondata_;
  ::google::protobuf::internal::ArenaStringPtr matchmakerdata_;
  ::google::protobuf::internal::ArenaStringPtr dnsname_;
  ::google::protobuf::int32 maxplayers_;
  bool joinable_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameProperty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.GameProperty) */ {
 public:
  GameProperty();
  virtual ~GameProperty();

  GameProperty(const GameProperty& from);

  inline GameProperty& operator=(const GameProperty& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameProperty& default_instance();

  static inline const GameProperty* internal_default_instance() {
    return reinterpret_cast<const GameProperty*>(
               &_GameProperty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(GameProperty* other);

  // implements Message ----------------------------------------------

  inline GameProperty* New() const PROTOBUF_FINAL { return New(NULL); }

  GameProperty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameProperty& from);
  void MergeFrom(const GameProperty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameProperty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.GameProperty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSession : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession) */ {
 public:
  PlayerSession();
  virtual ~PlayerSession();

  PlayerSession(const PlayerSession& from);

  inline PlayerSession& operator=(const PlayerSession& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSession& default_instance();

  static inline const PlayerSession* internal_default_instance() {
    return reinterpret_cast<const PlayerSession*>(
               &_PlayerSession_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(PlayerSession* other);

  // implements Message ----------------------------------------------

  inline PlayerSession* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerSession* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerSession& from);
  void MergeFrom(const PlayerSession& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerSession* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string playerSessionId = 1;
  void clear_playersessionid();
  static const int kPlayerSessionIdFieldNumber = 1;
  const ::std::string& playersessionid() const;
  void set_playersessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_playersessionid(::std::string&& value);
  #endif
  void set_playersessionid(const char* value);
  void set_playersessionid(const char* value, size_t size);
  ::std::string* mutable_playersessionid();
  ::std::string* release_playersessionid();
  void set_allocated_playersessionid(::std::string* playersessionid);

  // string playerId = 2;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 2;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string gameSessionId = 3;
  void clear_gamesessionid();
  static const int kGameSessionIdFieldNumber = 3;
  const ::std::string& gamesessionid() const;
  void set_gamesessionid(const ::std::string& value);
  #if LANG_CXX11
  void set_gamesessionid(::std::string&& value);
  #endif
  void set_gamesessionid(const char* value);
  void set_gamesessionid(const char* value, size_t size);
  ::std::string* mutable_gamesessionid();
  ::std::string* release_gamesessionid();
  void set_allocated_gamesessionid(::std::string* gamesessionid);

  // string fleetId = 4;
  void clear_fleetid();
  static const int kFleetIdFieldNumber = 4;
  const ::std::string& fleetid() const;
  void set_fleetid(const ::std::string& value);
  #if LANG_CXX11
  void set_fleetid(::std::string&& value);
  #endif
  void set_fleetid(const char* value);
  void set_fleetid(const char* value, size_t size);
  ::std::string* mutable_fleetid();
  ::std::string* release_fleetid();
  void set_allocated_fleetid(::std::string* fleetid);

  // string ipAddress = 5;
  void clear_ipaddress();
  static const int kIpAddressFieldNumber = 5;
  const ::std::string& ipaddress() const;
  void set_ipaddress(const ::std::string& value);
  #if LANG_CXX11
  void set_ipaddress(::std::string&& value);
  #endif
  void set_ipaddress(const char* value);
  void set_ipaddress(const char* value, size_t size);
  ::std::string* mutable_ipaddress();
  ::std::string* release_ipaddress();
  void set_allocated_ipaddress(::std::string* ipaddress);

  // string status = 6;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // string playerData = 10;
  void clear_playerdata();
  static const int kPlayerDataFieldNumber = 10;
  const ::std::string& playerdata() const;
  void set_playerdata(const ::std::string& value);
  #if LANG_CXX11
  void set_playerdata(::std::string&& value);
  #endif
  void set_playerdata(const char* value);
  void set_playerdata(const char* value, size_t size);
  ::std::string* mutable_playerdata();
  ::std::string* release_playerdata();
  void set_allocated_playerdata(::std::string* playerdata);

  // string dnsName = 11;
  void clear_dnsname();
  static const int kDnsNameFieldNumber = 11;
  const ::std::string& dnsname() const;
  void set_dnsname(const ::std::string& value);
  #if LANG_CXX11
  void set_dnsname(::std::string&& value);
  #endif
  void set_dnsname(const char* value);
  void set_dnsname(const char* value, size_t size);
  ::std::string* mutable_dnsname();
  ::std::string* release_dnsname();
  void set_allocated_dnsname(::std::string* dnsname);

  // int64 creationTime = 7;
  void clear_creationtime();
  static const int kCreationTimeFieldNumber = 7;
  ::google::protobuf::int64 creationtime() const;
  void set_creationtime(::google::protobuf::int64 value);

  // int64 terminationTime = 8;
  void clear_terminationtime();
  static const int kTerminationTimeFieldNumber = 8;
  ::google::protobuf::int64 terminationtime() const;
  void set_terminationtime(::google::protobuf::int64 value);

  // int32 port = 9;
  void clear_port();
  static const int kPortFieldNumber = 9;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playersessionid_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr gamesessionid_;
  ::google::protobuf::internal::ArenaStringPtr fleetid_;
  ::google::protobuf::internal::ArenaStringPtr ipaddress_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr playerdata_;
  ::google::protobuf::internal::ArenaStringPtr dnsname_;
  ::google::protobuf::int64 creationtime_;
  ::google::protobuf::int64 terminationtime_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  inline Player* New() const PROTOBUF_FINAL { return New(NULL); }

  Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
  int playerattributes_size() const;
  void clear_playerattributes();
  static const int kPlayerAttributesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >&
      playerattributes() const;
  ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >*
      mutable_playerattributes();

  // map<string, int32> latencyInMs = 4;
  int latencyinms_size() const;
  void clear_latencyinms();
  static const int kLatencyInMsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
      latencyinms() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
      mutable_latencyinms();

  // string playerId = 1;
  void clear_playerid();
  static const int kPlayerIdFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string team = 3;
  void clear_team();
  static const int kTeamFieldNumber = 3;
  const ::std::string& team() const;
  void set_team(const ::std::string& value);
  #if LANG_CXX11
  void set_team(::std::string&& value);
  #endif
  void set_team(const char* value);
  void set_team(const char* value, size_t size);
  ::std::string* mutable_team();
  ::std::string* release_team();
  void set_allocated_team(::std::string* team);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.Player)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class Player_PlayerAttributesEntry : public ::google::protobuf::internal::MapEntry<Player_PlayerAttributesEntry, 
      ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Player_PlayerAttributesEntry, 
      ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    Player_PlayerAttributesEntry();
    Player_PlayerAttributesEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Player_PlayerAttributesEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Player_PlayerAttributesEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      Player_PlayerAttributesEntry,
      ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > playerattributes_;
  private:
  public:
  class Player_LatencyInMsEntry : public ::google::protobuf::internal::MapEntry<Player_LatencyInMsEntry, 
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<Player_LatencyInMsEntry, 
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > SuperType;
    Player_LatencyInMsEntry();
    Player_LatencyInMsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const Player_LatencyInMsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_Player_LatencyInMsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      Player_LatencyInMsEntry,
      ::std::string, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > latencyinms_;
  private:
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr team_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class AttributeValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue) */ {
 public:
  AttributeValue();
  virtual ~AttributeValue();

  AttributeValue(const AttributeValue& from);

  inline AttributeValue& operator=(const AttributeValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttributeValue& default_instance();

  static inline const AttributeValue* internal_default_instance() {
    return reinterpret_cast<const AttributeValue*>(
               &_AttributeValue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(AttributeValue* other);

  // implements Message ----------------------------------------------

  inline AttributeValue* New() const PROTOBUF_FINAL { return New(NULL); }

  AttributeValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AttributeValue& from);
  void MergeFrom(const AttributeValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AttributeValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string SL = 4;
  int sl_size() const;
  void clear_sl();
  static const int kSLFieldNumber = 4;
  const ::std::string& sl(int index) const;
  ::std::string* mutable_sl(int index);
  void set_sl(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_sl(int index, ::std::string&& value);
  #endif
  void set_sl(int index, const char* value);
  void set_sl(int index, const char* value, size_t size);
  ::std::string* add_sl();
  void add_sl(const ::std::string& value);
  #if LANG_CXX11
  void add_sl(::std::string&& value);
  #endif
  void add_sl(const char* value);
  void add_sl(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sl() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sl();

  // map<string, double> SDM = 5;
  int sdm_size() const;
  void clear_sdm();
  static const int kSDMFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, double >&
      sdm() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_sdm();

  // string S = 2;
  void clear_s();
  static const int kSFieldNumber = 2;
  const ::std::string& s() const;
  void set_s(const ::std::string& value);
  #if LANG_CXX11
  void set_s(::std::string&& value);
  #endif
  void set_s(const char* value);
  void set_s(const char* value, size_t size);
  ::std::string* mutable_s();
  ::std::string* release_s();
  void set_allocated_s(::std::string* s);

  // double N = 3;
  void clear_n();
  static const int kNFieldNumber = 3;
  double n() const;
  void set_n(double value);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sl_;
  public:
  class AttributeValue_SDMEntry : public ::google::protobuf::internal::MapEntry<AttributeValue_SDMEntry, 
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<AttributeValue_SDMEntry, 
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > SuperType;
    AttributeValue_SDMEntry();
    AttributeValue_SDMEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const AttributeValue_SDMEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_AttributeValue_SDMEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      AttributeValue_SDMEntry,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > sdm_;
  private:
  ::google::protobuf::internal::ArenaStringPtr s_;
  double n_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct protobuf_sdk_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ProcessReady

// repeated string logPathsToUpload = 1;
inline int ProcessReady::logpathstoupload_size() const {
  return logpathstoupload_.size();
}
inline void ProcessReady::clear_logpathstoupload() {
  logpathstoupload_.Clear();
}
inline const ::std::string& ProcessReady::logpathstoupload(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_.Get(index);
}
inline ::std::string* ProcessReady::mutable_logpathstoupload(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_.Mutable(index);
}
inline void ProcessReady::set_logpathstoupload(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  logpathstoupload_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ProcessReady::set_logpathstoupload(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  logpathstoupload_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ProcessReady::set_logpathstoupload(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  logpathstoupload_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
inline void ProcessReady::set_logpathstoupload(int index, const char* value, size_t size) {
  logpathstoupload_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
inline ::std::string* ProcessReady::add_logpathstoupload() {
  // @@protoc_insertion_point(field_add_mutable:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_.Add();
}
inline void ProcessReady::add_logpathstoupload(const ::std::string& value) {
  logpathstoupload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
#if LANG_CXX11
inline void ProcessReady::add_logpathstoupload(::std::string&& value) {
  logpathstoupload_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
#endif
inline void ProcessReady::add_logpathstoupload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  logpathstoupload_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
inline void ProcessReady::add_logpathstoupload(const char* value, size_t size) {
  logpathstoupload_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ProcessReady::logpathstoupload() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return logpathstoupload_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ProcessReady::mutable_logpathstoupload() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.logPathsToUpload)
  return &logpathstoupload_;
}

// int32 port = 2;
inline void ProcessReady::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ProcessReady::port() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.port)
  return port_;
}
inline void ProcessReady::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.port)
}

// int32 maxConcurrentGameSessions = 3;
inline void ProcessReady::clear_maxconcurrentgamesessions() {
  maxconcurrentgamesessions_ = 0;
}
inline ::google::protobuf::int32 ProcessReady::maxconcurrentgamesessions() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.maxConcurrentGameSessions)
  return maxconcurrentgamesessions_;
}
inline void ProcessReady::set_maxconcurrentgamesessions(::google::protobuf::int32 value) {
  
  maxconcurrentgamesessions_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ProcessReady.maxConcurrentGameSessions)
}

// -------------------------------------------------------------------

// ProcessEnding

// -------------------------------------------------------------------

// GameSessionActivate

// string gameSessionId = 1;
inline void GameSessionActivate::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameSessionActivate::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
  return gamesessionid_.GetNoArena();
}
inline void GameSessionActivate::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
#if LANG_CXX11
inline void GameSessionActivate::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
#endif
inline void GameSessionActivate::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
inline void GameSessionActivate::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}
inline ::std::string* GameSessionActivate::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameSessionActivate::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSessionActivate::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.gameSessionId)
}

// int32 maxPlayers = 2;
inline void GameSessionActivate::clear_maxplayers() {
  maxplayers_ = 0;
}
inline ::google::protobuf::int32 GameSessionActivate::maxplayers() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.maxPlayers)
  return maxplayers_;
}
inline void GameSessionActivate::set_maxplayers(::google::protobuf::int32 value) {
  
  maxplayers_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.maxPlayers)
}

// int32 port = 3;
inline void GameSessionActivate::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 GameSessionActivate::port() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.port)
  return port_;
}
inline void GameSessionActivate::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionActivate.port)
}

// -------------------------------------------------------------------

// GameSessionTerminate

// string gameSessionId = 1;
inline void GameSessionTerminate::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameSessionTerminate::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
  return gamesessionid_.GetNoArena();
}
inline void GameSessionTerminate::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
#if LANG_CXX11
inline void GameSessionTerminate::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
#endif
inline void GameSessionTerminate::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
inline void GameSessionTerminate::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}
inline ::std::string* GameSessionTerminate::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameSessionTerminate::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSessionTerminate::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSessionTerminate.gameSessionId)
}

// -------------------------------------------------------------------

// UpdatePlayerSessionCreationPolicy

// string gameSessionId = 1;
inline void UpdatePlayerSessionCreationPolicy::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdatePlayerSessionCreationPolicy::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
  return gamesessionid_.GetNoArena();
}
inline void UpdatePlayerSessionCreationPolicy::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
#if LANG_CXX11
inline void UpdatePlayerSessionCreationPolicy::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
#endif
inline void UpdatePlayerSessionCreationPolicy::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
inline void UpdatePlayerSessionCreationPolicy::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}
inline ::std::string* UpdatePlayerSessionCreationPolicy::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdatePlayerSessionCreationPolicy::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdatePlayerSessionCreationPolicy::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.gameSessionId)
}

// string newPlayerSessionCreationPolicy = 2;
inline void UpdatePlayerSessionCreationPolicy::clear_newplayersessioncreationpolicy() {
  newplayersessioncreationpolicy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdatePlayerSessionCreationPolicy::newplayersessioncreationpolicy() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
  return newplayersessioncreationpolicy_.GetNoArena();
}
inline void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(const ::std::string& value) {
  
  newplayersessioncreationpolicy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
#if LANG_CXX11
inline void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(::std::string&& value) {
  
  newplayersessioncreationpolicy_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
#endif
inline void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  newplayersessioncreationpolicy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
inline void UpdatePlayerSessionCreationPolicy::set_newplayersessioncreationpolicy(const char* value, size_t size) {
  
  newplayersessioncreationpolicy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}
inline ::std::string* UpdatePlayerSessionCreationPolicy::mutable_newplayersessioncreationpolicy() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
  return newplayersessioncreationpolicy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdatePlayerSessionCreationPolicy::release_newplayersessioncreationpolicy() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
  
  return newplayersessioncreationpolicy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdatePlayerSessionCreationPolicy::set_allocated_newplayersessioncreationpolicy(::std::string* newplayersessioncreationpolicy) {
  if (newplayersessioncreationpolicy != NULL) {
    
  } else {
    
  }
  newplayersessioncreationpolicy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), newplayersessioncreationpolicy);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdatePlayerSessionCreationPolicy.newPlayerSessionCreationPolicy)
}

// -------------------------------------------------------------------

// AcceptPlayerSession

// string gameSessionId = 1;
inline void AcceptPlayerSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceptPlayerSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
  return gamesessionid_.GetNoArena();
}
inline void AcceptPlayerSession::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
#if LANG_CXX11
inline void AcceptPlayerSession::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
#endif
inline void AcceptPlayerSession::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
inline void AcceptPlayerSession::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}
inline ::std::string* AcceptPlayerSession::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceptPlayerSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptPlayerSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.gameSessionId)
}

// string playerSessionId = 2;
inline void AcceptPlayerSession::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceptPlayerSession::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
  return playersessionid_.GetNoArena();
}
inline void AcceptPlayerSession::set_playersessionid(const ::std::string& value) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
#if LANG_CXX11
inline void AcceptPlayerSession::set_playersessionid(::std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
#endif
inline void AcceptPlayerSession::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
inline void AcceptPlayerSession::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}
inline ::std::string* AcceptPlayerSession::mutable_playersessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceptPlayerSession::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceptPlayerSession::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.AcceptPlayerSession.playerSessionId)
}

// -------------------------------------------------------------------

// RemovePlayerSession

// string gameSessionId = 1;
inline void RemovePlayerSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemovePlayerSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
  return gamesessionid_.GetNoArena();
}
inline void RemovePlayerSession::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
#if LANG_CXX11
inline void RemovePlayerSession::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
#endif
inline void RemovePlayerSession::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
inline void RemovePlayerSession::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}
inline ::std::string* RemovePlayerSession::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePlayerSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePlayerSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.gameSessionId)
}

// string playerSessionId = 2;
inline void RemovePlayerSession::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RemovePlayerSession::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
  return playersessionid_.GetNoArena();
}
inline void RemovePlayerSession::set_playersessionid(const ::std::string& value) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
#if LANG_CXX11
inline void RemovePlayerSession::set_playersessionid(::std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
#endif
inline void RemovePlayerSession::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
inline void RemovePlayerSession::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}
inline ::std::string* RemovePlayerSession::mutable_playersessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemovePlayerSession::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemovePlayerSession::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.RemovePlayerSession.playerSessionId)
}

// -------------------------------------------------------------------

// ReportHealth

// bool healthStatus = 1;
inline void ReportHealth::clear_healthstatus() {
  healthstatus_ = false;
}
inline bool ReportHealth::healthstatus() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth.healthStatus)
  return healthstatus_;
}
inline void ReportHealth::set_healthstatus(bool value) {
  
  healthstatus_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.ReportHealth.healthStatus)
}

// -------------------------------------------------------------------

// DescribePlayerSessionsRequest

// string gameSessionId = 1;
inline void DescribePlayerSessionsRequest::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescribePlayerSessionsRequest::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
  return gamesessionid_.GetNoArena();
}
inline void DescribePlayerSessionsRequest::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
#if LANG_CXX11
inline void DescribePlayerSessionsRequest::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
#endif
inline void DescribePlayerSessionsRequest::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
inline void DescribePlayerSessionsRequest::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}
inline ::std::string* DescribePlayerSessionsRequest::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescribePlayerSessionsRequest::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsRequest::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.gameSessionId)
}

// string playerId = 2;
inline void DescribePlayerSessionsRequest::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescribePlayerSessionsRequest::playerid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
  return playerid_.GetNoArena();
}
inline void DescribePlayerSessionsRequest::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
#if LANG_CXX11
inline void DescribePlayerSessionsRequest::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
#endif
inline void DescribePlayerSessionsRequest::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
inline void DescribePlayerSessionsRequest::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}
inline ::std::string* DescribePlayerSessionsRequest::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescribePlayerSessionsRequest::release_playerid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsRequest::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerId)
}

// string playerSessionId = 3;
inline void DescribePlayerSessionsRequest::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescribePlayerSessionsRequest::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
  return playersessionid_.GetNoArena();
}
inline void DescribePlayerSessionsRequest::set_playersessionid(const ::std::string& value) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
#if LANG_CXX11
inline void DescribePlayerSessionsRequest::set_playersessionid(::std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
#endif
inline void DescribePlayerSessionsRequest::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
inline void DescribePlayerSessionsRequest::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}
inline ::std::string* DescribePlayerSessionsRequest::mutable_playersessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescribePlayerSessionsRequest::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsRequest::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionId)
}

// string playerSessionStatusFilter = 4;
inline void DescribePlayerSessionsRequest::clear_playersessionstatusfilter() {
  playersessionstatusfilter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescribePlayerSessionsRequest::playersessionstatusfilter() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  return playersessionstatusfilter_.GetNoArena();
}
inline void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const ::std::string& value) {
  
  playersessionstatusfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
#if LANG_CXX11
inline void DescribePlayerSessionsRequest::set_playersessionstatusfilter(::std::string&& value) {
  
  playersessionstatusfilter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
#endif
inline void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playersessionstatusfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
inline void DescribePlayerSessionsRequest::set_playersessionstatusfilter(const char* value, size_t size) {
  
  playersessionstatusfilter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}
inline ::std::string* DescribePlayerSessionsRequest::mutable_playersessionstatusfilter() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  return playersessionstatusfilter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescribePlayerSessionsRequest::release_playersessionstatusfilter() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
  
  return playersessionstatusfilter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsRequest::set_allocated_playersessionstatusfilter(::std::string* playersessionstatusfilter) {
  if (playersessionstatusfilter != NULL) {
    
  } else {
    
  }
  playersessionstatusfilter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionstatusfilter);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.playerSessionStatusFilter)
}

// string nextToken = 5;
inline void DescribePlayerSessionsRequest::clear_nexttoken() {
  nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescribePlayerSessionsRequest::nexttoken() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
  return nexttoken_.GetNoArena();
}
inline void DescribePlayerSessionsRequest::set_nexttoken(const ::std::string& value) {
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
#if LANG_CXX11
inline void DescribePlayerSessionsRequest::set_nexttoken(::std::string&& value) {
  
  nexttoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
#endif
inline void DescribePlayerSessionsRequest::set_nexttoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
inline void DescribePlayerSessionsRequest::set_nexttoken(const char* value, size_t size) {
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}
inline ::std::string* DescribePlayerSessionsRequest::mutable_nexttoken() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
  return nexttoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescribePlayerSessionsRequest::release_nexttoken() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
  
  return nexttoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsRequest::set_allocated_nexttoken(::std::string* nexttoken) {
  if (nexttoken != NULL) {
    
  } else {
    
  }
  nexttoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nexttoken);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.nextToken)
}

// int32 limit = 6;
inline void DescribePlayerSessionsRequest::clear_limit() {
  limit_ = 0;
}
inline ::google::protobuf::int32 DescribePlayerSessionsRequest::limit() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.limit)
  return limit_;
}
inline void DescribePlayerSessionsRequest::set_limit(::google::protobuf::int32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsRequest.limit)
}

// -------------------------------------------------------------------

// BackfillMatchmakingRequest

// string ticketId = 1;
inline void BackfillMatchmakingRequest::clear_ticketid() {
  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BackfillMatchmakingRequest::ticketid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
  return ticketid_.GetNoArena();
}
inline void BackfillMatchmakingRequest::set_ticketid(const ::std::string& value) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
}
#if LANG_CXX11
inline void BackfillMatchmakingRequest::set_ticketid(::std::string&& value) {
  
  ticketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
}
#endif
inline void BackfillMatchmakingRequest::set_ticketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
}
inline void BackfillMatchmakingRequest::set_ticketid(const char* value, size_t size) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
}
inline ::std::string* BackfillMatchmakingRequest::mutable_ticketid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
  return ticketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackfillMatchmakingRequest::release_ticketid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
  
  return ticketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackfillMatchmakingRequest::set_allocated_ticketid(::std::string* ticketid) {
  if (ticketid != NULL) {
    
  } else {
    
  }
  ticketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticketid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.ticketId)
}

// string gameSessionArn = 2;
inline void BackfillMatchmakingRequest::clear_gamesessionarn() {
  gamesessionarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BackfillMatchmakingRequest::gamesessionarn() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
  return gamesessionarn_.GetNoArena();
}
inline void BackfillMatchmakingRequest::set_gamesessionarn(const ::std::string& value) {
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
}
#if LANG_CXX11
inline void BackfillMatchmakingRequest::set_gamesessionarn(::std::string&& value) {
  
  gamesessionarn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
}
#endif
inline void BackfillMatchmakingRequest::set_gamesessionarn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
}
inline void BackfillMatchmakingRequest::set_gamesessionarn(const char* value, size_t size) {
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
}
inline ::std::string* BackfillMatchmakingRequest::mutable_gamesessionarn() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
  return gamesessionarn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackfillMatchmakingRequest::release_gamesessionarn() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
  
  return gamesessionarn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackfillMatchmakingRequest::set_allocated_gamesessionarn(::std::string* gamesessionarn) {
  if (gamesessionarn != NULL) {
    
  } else {
    
  }
  gamesessionarn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionarn);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.gameSessionArn)
}

// string matchmakingConfigurationArn = 3;
inline void BackfillMatchmakingRequest::clear_matchmakingconfigurationarn() {
  matchmakingconfigurationarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BackfillMatchmakingRequest::matchmakingconfigurationarn() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
  return matchmakingconfigurationarn_.GetNoArena();
}
inline void BackfillMatchmakingRequest::set_matchmakingconfigurationarn(const ::std::string& value) {
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
}
#if LANG_CXX11
inline void BackfillMatchmakingRequest::set_matchmakingconfigurationarn(::std::string&& value) {
  
  matchmakingconfigurationarn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
}
#endif
inline void BackfillMatchmakingRequest::set_matchmakingconfigurationarn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
}
inline void BackfillMatchmakingRequest::set_matchmakingconfigurationarn(const char* value, size_t size) {
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
}
inline ::std::string* BackfillMatchmakingRequest::mutable_matchmakingconfigurationarn() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
  return matchmakingconfigurationarn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackfillMatchmakingRequest::release_matchmakingconfigurationarn() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
  
  return matchmakingconfigurationarn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackfillMatchmakingRequest::set_allocated_matchmakingconfigurationarn(::std::string* matchmakingconfigurationarn) {
  if (matchmakingconfigurationarn != NULL) {
    
  } else {
    
  }
  matchmakingconfigurationarn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matchmakingconfigurationarn);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.matchmakingConfigurationArn)
}

// repeated .com.amazon.whitewater.auxproxy.pbuffer.Player players = 4;
inline int BackfillMatchmakingRequest::players_size() const {
  return players_.size();
}
inline void BackfillMatchmakingRequest::clear_players() {
  players_.Clear();
}
inline const ::com::amazon::whitewater::auxproxy::pbuffer::Player& BackfillMatchmakingRequest::players(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.players)
  return players_.Get(index);
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::Player* BackfillMatchmakingRequest::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.players)
  return players_.Mutable(index);
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::Player* BackfillMatchmakingRequest::add_players() {
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::Player >*
BackfillMatchmakingRequest::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::Player >&
BackfillMatchmakingRequest::players() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingRequest.players)
  return players_;
}

// -------------------------------------------------------------------

// StopMatchmakingRequest

// string ticketId = 1;
inline void StopMatchmakingRequest::clear_ticketid() {
  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopMatchmakingRequest::ticketid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
  return ticketid_.GetNoArena();
}
inline void StopMatchmakingRequest::set_ticketid(const ::std::string& value) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
}
#if LANG_CXX11
inline void StopMatchmakingRequest::set_ticketid(::std::string&& value) {
  
  ticketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
}
#endif
inline void StopMatchmakingRequest::set_ticketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
}
inline void StopMatchmakingRequest::set_ticketid(const char* value, size_t size) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
}
inline ::std::string* StopMatchmakingRequest::mutable_ticketid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
  return ticketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopMatchmakingRequest::release_ticketid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
  
  return ticketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopMatchmakingRequest::set_allocated_ticketid(::std::string* ticketid) {
  if (ticketid != NULL) {
    
  } else {
    
  }
  ticketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticketid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.ticketId)
}

// string gameSessionArn = 2;
inline void StopMatchmakingRequest::clear_gamesessionarn() {
  gamesessionarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopMatchmakingRequest::gamesessionarn() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
  return gamesessionarn_.GetNoArena();
}
inline void StopMatchmakingRequest::set_gamesessionarn(const ::std::string& value) {
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
}
#if LANG_CXX11
inline void StopMatchmakingRequest::set_gamesessionarn(::std::string&& value) {
  
  gamesessionarn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
}
#endif
inline void StopMatchmakingRequest::set_gamesessionarn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
}
inline void StopMatchmakingRequest::set_gamesessionarn(const char* value, size_t size) {
  
  gamesessionarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
}
inline ::std::string* StopMatchmakingRequest::mutable_gamesessionarn() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
  return gamesessionarn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopMatchmakingRequest::release_gamesessionarn() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
  
  return gamesessionarn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopMatchmakingRequest::set_allocated_gamesessionarn(::std::string* gamesessionarn) {
  if (gamesessionarn != NULL) {
    
  } else {
    
  }
  gamesessionarn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionarn);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.gameSessionArn)
}

// string matchmakingConfigurationArn = 3;
inline void StopMatchmakingRequest::clear_matchmakingconfigurationarn() {
  matchmakingconfigurationarn_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopMatchmakingRequest::matchmakingconfigurationarn() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
  return matchmakingconfigurationarn_.GetNoArena();
}
inline void StopMatchmakingRequest::set_matchmakingconfigurationarn(const ::std::string& value) {
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
}
#if LANG_CXX11
inline void StopMatchmakingRequest::set_matchmakingconfigurationarn(::std::string&& value) {
  
  matchmakingconfigurationarn_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
}
#endif
inline void StopMatchmakingRequest::set_matchmakingconfigurationarn(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
}
inline void StopMatchmakingRequest::set_matchmakingconfigurationarn(const char* value, size_t size) {
  
  matchmakingconfigurationarn_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
}
inline ::std::string* StopMatchmakingRequest::mutable_matchmakingconfigurationarn() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
  return matchmakingconfigurationarn_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopMatchmakingRequest::release_matchmakingconfigurationarn() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
  
  return matchmakingconfigurationarn_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopMatchmakingRequest::set_allocated_matchmakingconfigurationarn(::std::string* matchmakingconfigurationarn) {
  if (matchmakingconfigurationarn != NULL) {
    
  } else {
    
  }
  matchmakingconfigurationarn_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matchmakingconfigurationarn);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.StopMatchmakingRequest.matchmakingConfigurationArn)
}

// -------------------------------------------------------------------

// GetInstanceCertificate

// -------------------------------------------------------------------

// ActivateGameSession

// .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
inline bool ActivateGameSession::has_gamesession() const {
  return this != internal_default_instance() && gamesession_ != NULL;
}
inline void ActivateGameSession::clear_gamesession() {
  if (GetArenaNoVirtual() == NULL && gamesession_ != NULL) delete gamesession_;
  gamesession_ = NULL;
}
inline const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& ActivateGameSession::gamesession() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
  return gamesession_ != NULL ? *gamesession_
                         : *::com::amazon::whitewater::auxproxy::pbuffer::GameSession::internal_default_instance();
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* ActivateGameSession::mutable_gamesession() {
  
  if (gamesession_ == NULL) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession;
  }
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
  return gamesession_;
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* ActivateGameSession::release_gamesession() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
  
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* temp = gamesession_;
  gamesession_ = NULL;
  return temp;
}
inline void ActivateGameSession::set_allocated_gamesession(::com::amazon::whitewater::auxproxy::pbuffer::GameSession* gamesession) {
  delete gamesession_;
  gamesession_ = gamesession;
  if (gamesession) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.ActivateGameSession.gameSession)
}

// -------------------------------------------------------------------

// TerminateProcess

// int64 terminationTime = 1;
inline void TerminateProcess::clear_terminationtime() {
  terminationtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TerminateProcess::terminationtime() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess.terminationTime)
  return terminationtime_;
}
inline void TerminateProcess::set_terminationtime(::google::protobuf::int64 value) {
  
  terminationtime_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.TerminateProcess.terminationTime)
}

// -------------------------------------------------------------------

// DescribePlayerSessionsResponse

// string nextToken = 1;
inline void DescribePlayerSessionsResponse::clear_nexttoken() {
  nexttoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DescribePlayerSessionsResponse::nexttoken() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
  return nexttoken_.GetNoArena();
}
inline void DescribePlayerSessionsResponse::set_nexttoken(const ::std::string& value) {
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
#if LANG_CXX11
inline void DescribePlayerSessionsResponse::set_nexttoken(::std::string&& value) {
  
  nexttoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
#endif
inline void DescribePlayerSessionsResponse::set_nexttoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
inline void DescribePlayerSessionsResponse::set_nexttoken(const char* value, size_t size) {
  
  nexttoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}
inline ::std::string* DescribePlayerSessionsResponse::mutable_nexttoken() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
  return nexttoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DescribePlayerSessionsResponse::release_nexttoken() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
  
  return nexttoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DescribePlayerSessionsResponse::set_allocated_nexttoken(::std::string* nexttoken) {
  if (nexttoken != NULL) {
    
  } else {
    
  }
  nexttoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nexttoken);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.nextToken)
}

// repeated .com.amazon.whitewater.auxproxy.pbuffer.PlayerSession playerSessions = 2;
inline int DescribePlayerSessionsResponse::playersessions_size() const {
  return playersessions_.size();
}
inline void DescribePlayerSessionsResponse::clear_playersessions() {
  playersessions_.Clear();
}
inline const ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession& DescribePlayerSessionsResponse::playersessions(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_.Get(index);
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession* DescribePlayerSessionsResponse::mutable_playersessions(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_.Mutable(index);
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession* DescribePlayerSessionsResponse::add_playersessions() {
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >*
DescribePlayerSessionsResponse::mutable_playersessions() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return &playersessions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::PlayerSession >&
DescribePlayerSessionsResponse::playersessions() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.DescribePlayerSessionsResponse.playerSessions)
  return playersessions_;
}

// -------------------------------------------------------------------

// UpdateGameSession

// .com.amazon.whitewater.auxproxy.pbuffer.GameSession gameSession = 1;
inline bool UpdateGameSession::has_gamesession() const {
  return this != internal_default_instance() && gamesession_ != NULL;
}
inline void UpdateGameSession::clear_gamesession() {
  if (GetArenaNoVirtual() == NULL && gamesession_ != NULL) delete gamesession_;
  gamesession_ = NULL;
}
inline const ::com::amazon::whitewater::auxproxy::pbuffer::GameSession& UpdateGameSession::gamesession() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.gameSession)
  return gamesession_ != NULL ? *gamesession_
                         : *::com::amazon::whitewater::auxproxy::pbuffer::GameSession::internal_default_instance();
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* UpdateGameSession::mutable_gamesession() {
  
  if (gamesession_ == NULL) {
    gamesession_ = new ::com::amazon::whitewater::auxproxy::pbuffer::GameSession;
  }
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.gameSession)
  return gamesession_;
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* UpdateGameSession::release_gamesession() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.gameSession)
  
  ::com::amazon::whitewater::auxproxy::pbuffer::GameSession* temp = gamesession_;
  gamesession_ = NULL;
  return temp;
}
inline void UpdateGameSession::set_allocated_gamesession(::com::amazon::whitewater::auxproxy::pbuffer::GameSession* gamesession) {
  delete gamesession_;
  gamesession_ = gamesession;
  if (gamesession) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.gameSession)
}

// string updateReason = 2;
inline void UpdateGameSession::clear_updatereason() {
  updatereason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateGameSession::updatereason() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
  return updatereason_.GetNoArena();
}
inline void UpdateGameSession::set_updatereason(const ::std::string& value) {
  
  updatereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
}
#if LANG_CXX11
inline void UpdateGameSession::set_updatereason(::std::string&& value) {
  
  updatereason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
}
#endif
inline void UpdateGameSession::set_updatereason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  updatereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
}
inline void UpdateGameSession::set_updatereason(const char* value, size_t size) {
  
  updatereason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
}
inline ::std::string* UpdateGameSession::mutable_updatereason() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
  return updatereason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateGameSession::release_updatereason() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
  
  return updatereason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateGameSession::set_allocated_updatereason(::std::string* updatereason) {
  if (updatereason != NULL) {
    
  } else {
    
  }
  updatereason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), updatereason);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.updateReason)
}

// string backfillTicketId = 3;
inline void UpdateGameSession::clear_backfillticketid() {
  backfillticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateGameSession::backfillticketid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
  return backfillticketid_.GetNoArena();
}
inline void UpdateGameSession::set_backfillticketid(const ::std::string& value) {
  
  backfillticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
}
#if LANG_CXX11
inline void UpdateGameSession::set_backfillticketid(::std::string&& value) {
  
  backfillticketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
}
#endif
inline void UpdateGameSession::set_backfillticketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  backfillticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
}
inline void UpdateGameSession::set_backfillticketid(const char* value, size_t size) {
  
  backfillticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
}
inline ::std::string* UpdateGameSession::mutable_backfillticketid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
  return backfillticketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateGameSession::release_backfillticketid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
  
  return backfillticketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateGameSession::set_allocated_backfillticketid(::std::string* backfillticketid) {
  if (backfillticketid != NULL) {
    
  } else {
    
  }
  backfillticketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), backfillticketid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.UpdateGameSession.backfillTicketId)
}

// -------------------------------------------------------------------

// GetInstanceCertificateResponse

// string certificatePath = 1;
inline void GetInstanceCertificateResponse::clear_certificatepath() {
  certificatepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInstanceCertificateResponse::certificatepath() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
  return certificatepath_.GetNoArena();
}
inline void GetInstanceCertificateResponse::set_certificatepath(const ::std::string& value) {
  
  certificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
}
#if LANG_CXX11
inline void GetInstanceCertificateResponse::set_certificatepath(::std::string&& value) {
  
  certificatepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
}
#endif
inline void GetInstanceCertificateResponse::set_certificatepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
}
inline void GetInstanceCertificateResponse::set_certificatepath(const char* value, size_t size) {
  
  certificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
}
inline ::std::string* GetInstanceCertificateResponse::mutable_certificatepath() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
  return certificatepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInstanceCertificateResponse::release_certificatepath() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
  
  return certificatepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstanceCertificateResponse::set_allocated_certificatepath(::std::string* certificatepath) {
  if (certificatepath != NULL) {
    
  } else {
    
  }
  certificatepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificatepath);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificatePath)
}

// string certificateChainPath = 2;
inline void GetInstanceCertificateResponse::clear_certificatechainpath() {
  certificatechainpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInstanceCertificateResponse::certificatechainpath() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
  return certificatechainpath_.GetNoArena();
}
inline void GetInstanceCertificateResponse::set_certificatechainpath(const ::std::string& value) {
  
  certificatechainpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
}
#if LANG_CXX11
inline void GetInstanceCertificateResponse::set_certificatechainpath(::std::string&& value) {
  
  certificatechainpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
}
#endif
inline void GetInstanceCertificateResponse::set_certificatechainpath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  certificatechainpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
}
inline void GetInstanceCertificateResponse::set_certificatechainpath(const char* value, size_t size) {
  
  certificatechainpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
}
inline ::std::string* GetInstanceCertificateResponse::mutable_certificatechainpath() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
  return certificatechainpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInstanceCertificateResponse::release_certificatechainpath() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
  
  return certificatechainpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstanceCertificateResponse::set_allocated_certificatechainpath(::std::string* certificatechainpath) {
  if (certificatechainpath != NULL) {
    
  } else {
    
  }
  certificatechainpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), certificatechainpath);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.certificateChainPath)
}

// string privateKeyPath = 3;
inline void GetInstanceCertificateResponse::clear_privatekeypath() {
  privatekeypath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInstanceCertificateResponse::privatekeypath() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
  return privatekeypath_.GetNoArena();
}
inline void GetInstanceCertificateResponse::set_privatekeypath(const ::std::string& value) {
  
  privatekeypath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
}
#if LANG_CXX11
inline void GetInstanceCertificateResponse::set_privatekeypath(::std::string&& value) {
  
  privatekeypath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
}
#endif
inline void GetInstanceCertificateResponse::set_privatekeypath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  privatekeypath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
}
inline void GetInstanceCertificateResponse::set_privatekeypath(const char* value, size_t size) {
  
  privatekeypath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
}
inline ::std::string* GetInstanceCertificateResponse::mutable_privatekeypath() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
  return privatekeypath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInstanceCertificateResponse::release_privatekeypath() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
  
  return privatekeypath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstanceCertificateResponse::set_allocated_privatekeypath(::std::string* privatekeypath) {
  if (privatekeypath != NULL) {
    
  } else {
    
  }
  privatekeypath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), privatekeypath);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.privateKeyPath)
}

// string hostName = 4;
inline void GetInstanceCertificateResponse::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInstanceCertificateResponse::hostname() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
  return hostname_.GetNoArena();
}
inline void GetInstanceCertificateResponse::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
}
#if LANG_CXX11
inline void GetInstanceCertificateResponse::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
}
#endif
inline void GetInstanceCertificateResponse::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
}
inline void GetInstanceCertificateResponse::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
}
inline ::std::string* GetInstanceCertificateResponse::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInstanceCertificateResponse::release_hostname() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstanceCertificateResponse::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.hostName)
}

// string rootCertificatePath = 5;
inline void GetInstanceCertificateResponse::clear_rootcertificatepath() {
  rootcertificatepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetInstanceCertificateResponse::rootcertificatepath() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
  return rootcertificatepath_.GetNoArena();
}
inline void GetInstanceCertificateResponse::set_rootcertificatepath(const ::std::string& value) {
  
  rootcertificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
}
#if LANG_CXX11
inline void GetInstanceCertificateResponse::set_rootcertificatepath(::std::string&& value) {
  
  rootcertificatepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
}
#endif
inline void GetInstanceCertificateResponse::set_rootcertificatepath(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  rootcertificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
}
inline void GetInstanceCertificateResponse::set_rootcertificatepath(const char* value, size_t size) {
  
  rootcertificatepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
}
inline ::std::string* GetInstanceCertificateResponse::mutable_rootcertificatepath() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
  return rootcertificatepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetInstanceCertificateResponse::release_rootcertificatepath() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
  
  return rootcertificatepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetInstanceCertificateResponse::set_allocated_rootcertificatepath(::std::string* rootcertificatepath) {
  if (rootcertificatepath != NULL) {
    
  } else {
    
  }
  rootcertificatepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rootcertificatepath);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GetInstanceCertificateResponse.rootCertificatePath)
}

// -------------------------------------------------------------------

// BackfillMatchmakingResponse

// string ticketId = 1;
inline void BackfillMatchmakingResponse::clear_ticketid() {
  ticketid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BackfillMatchmakingResponse::ticketid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
  return ticketid_.GetNoArena();
}
inline void BackfillMatchmakingResponse::set_ticketid(const ::std::string& value) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
}
#if LANG_CXX11
inline void BackfillMatchmakingResponse::set_ticketid(::std::string&& value) {
  
  ticketid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
}
#endif
inline void BackfillMatchmakingResponse::set_ticketid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
}
inline void BackfillMatchmakingResponse::set_ticketid(const char* value, size_t size) {
  
  ticketid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
}
inline ::std::string* BackfillMatchmakingResponse::mutable_ticketid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
  return ticketid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BackfillMatchmakingResponse::release_ticketid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
  
  return ticketid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BackfillMatchmakingResponse::set_allocated_ticketid(::std::string* ticketid) {
  if (ticketid != NULL) {
    
  } else {
    
  }
  ticketid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ticketid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.BackfillMatchmakingResponse.ticketId)
}

// -------------------------------------------------------------------

// Response

// .com.amazon.whitewater.auxproxy.pbuffer.Response.Status status = 1;
inline void Response::clear_status() {
  status_ = 0;
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.Response.status)
  return static_cast< ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status >(status_);
}
inline void Response::set_status(::com::amazon::whitewater::auxproxy::pbuffer::Response_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.Response.status)
}

// string errorMessage = 2;
inline void Response::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::errormessage() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
  return errormessage_.GetNoArena();
}
inline void Response::set_errormessage(const ::std::string& value) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
#if LANG_CXX11
inline void Response::set_errormessage(::std::string&& value) {
  
  errormessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
#endif
inline void Response::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
inline void Response::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}
inline ::std::string* Response::mutable_errormessage() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_errormessage() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
  
  return errormessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.Response.errorMessage)
}

// -------------------------------------------------------------------

// GameLiftResponse

// .com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.Status status = 1;
inline void GameLiftResponse::clear_status() {
  status_ = 0;
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status GameLiftResponse::status() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.status)
  return static_cast< ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status >(status_);
}
inline void GameLiftResponse::set_status(::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.status)
}

// string responseData = 2;
inline void GameLiftResponse::clear_responsedata() {
  responsedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLiftResponse::responsedata() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
  return responsedata_.GetNoArena();
}
inline void GameLiftResponse::set_responsedata(const ::std::string& value) {
  
  responsedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
}
#if LANG_CXX11
inline void GameLiftResponse::set_responsedata(::std::string&& value) {
  
  responsedata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
}
#endif
inline void GameLiftResponse::set_responsedata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  responsedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
}
inline void GameLiftResponse::set_responsedata(const char* value, size_t size) {
  
  responsedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
}
inline ::std::string* GameLiftResponse::mutable_responsedata() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
  return responsedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLiftResponse::release_responsedata() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
  
  return responsedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLiftResponse::set_allocated_responsedata(::std::string* responsedata) {
  if (responsedata != NULL) {
    
  } else {
    
  }
  responsedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), responsedata);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.responseData)
}

// string errorMessage = 3;
inline void GameLiftResponse::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameLiftResponse::errormessage() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
  return errormessage_.GetNoArena();
}
inline void GameLiftResponse::set_errormessage(const ::std::string& value) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
}
#if LANG_CXX11
inline void GameLiftResponse::set_errormessage(::std::string&& value) {
  
  errormessage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
}
#endif
inline void GameLiftResponse::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
}
inline void GameLiftResponse::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
}
inline ::std::string* GameLiftResponse::mutable_errormessage() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
  return errormessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameLiftResponse::release_errormessage() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
  
  return errormessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameLiftResponse::set_allocated_errormessage(::std::string* errormessage) {
  if (errormessage != NULL) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameLiftResponse.errorMessage)
}

// -------------------------------------------------------------------

// GameSession

// string gameSessionId = 1;
inline void GameSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
  return gamesessionid_.GetNoArena();
}
inline void GameSession::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
#if LANG_CXX11
inline void GameSession::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
#endif
inline void GameSession::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
inline void GameSession::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}
inline ::std::string* GameSession::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionId)
}

// string fleetId = 2;
inline void GameSession::clear_fleetid() {
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameSession::fleetid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
  return fleetid_.GetNoArena();
}
inline void GameSession::set_fleetid(const ::std::string& value) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
#if LANG_CXX11
inline void GameSession::set_fleetid(::std::string&& value) {
  
  fleetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
#endif
inline void GameSession::set_fleetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
inline void GameSession::set_fleetid(const char* value, size_t size) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}
inline ::std::string* GameSession::mutable_fleetid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
  return fleetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameSession::release_fleetid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
  
  return fleetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSession::set_allocated_fleetid(::std::string* fleetid) {
  if (fleetid != NULL) {
    
  } else {
    
  }
  fleetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleetid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.fleetId)
}

// string name = 3;
inline void GameSession::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameSession::name() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
  return name_.GetNoArena();
}
inline void GameSession::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
#if LANG_CXX11
inline void GameSession::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
#endif
inline void GameSession::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
inline void GameSession::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}
inline ::std::string* GameSession::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameSession::release_name() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSession::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.name)
}

// int32 maxPlayers = 4;
inline void GameSession::clear_maxplayers() {
  maxplayers_ = 0;
}
inline ::google::protobuf::int32 GameSession::maxplayers() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.maxPlayers)
  return maxplayers_;
}
inline void GameSession::set_maxplayers(::google::protobuf::int32 value) {
  
  maxplayers_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.maxPlayers)
}

// bool joinable = 5;
inline void GameSession::clear_joinable() {
  joinable_ = false;
}
inline bool GameSession::joinable() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.joinable)
  return joinable_;
}
inline void GameSession::set_joinable(bool value) {
  
  joinable_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.joinable)
}

// repeated .com.amazon.whitewater.auxproxy.pbuffer.GameProperty gameProperties = 6;
inline int GameSession::gameproperties_size() const {
  return gameproperties_.size();
}
inline void GameSession::clear_gameproperties() {
  gameproperties_.Clear();
}
inline const ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty& GameSession::gameproperties(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_.Get(index);
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty* GameSession::mutable_gameproperties(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_.Mutable(index);
}
inline ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty* GameSession::add_gameproperties() {
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >*
GameSession::mutable_gameproperties() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return &gameproperties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::com::amazon::whitewater::auxproxy::pbuffer::GameProperty >&
GameSession::gameproperties() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameProperties)
  return gameproperties_;
}

// string ipAddress = 7;
inline void GameSession::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameSession::ipaddress() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
  return ipaddress_.GetNoArena();
}
inline void GameSession::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
}
#if LANG_CXX11
inline void GameSession::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
}
#endif
inline void GameSession::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
}
inline void GameSession::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
}
inline ::std::string* GameSession::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameSession::release_ipaddress() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSession::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.ipAddress)
}

// int32 port = 8;
inline void GameSession::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 GameSession::port() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.port)
  return port_;
}
inline void GameSession::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.port)
}

// string gameSessionData = 9;
inline void GameSession::clear_gamesessiondata() {
  gamesessiondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameSession::gamesessiondata() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
  return gamesessiondata_.GetNoArena();
}
inline void GameSession::set_gamesessiondata(const ::std::string& value) {
  
  gamesessiondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
}
#if LANG_CXX11
inline void GameSession::set_gamesessiondata(::std::string&& value) {
  
  gamesessiondata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
}
#endif
inline void GameSession::set_gamesessiondata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessiondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
}
inline void GameSession::set_gamesessiondata(const char* value, size_t size) {
  
  gamesessiondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
}
inline ::std::string* GameSession::mutable_gamesessiondata() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
  return gamesessiondata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameSession::release_gamesessiondata() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
  
  return gamesessiondata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSession::set_allocated_gamesessiondata(::std::string* gamesessiondata) {
  if (gamesessiondata != NULL) {
    
  } else {
    
  }
  gamesessiondata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessiondata);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.gameSessionData)
}

// string matchmakerData = 10;
inline void GameSession::clear_matchmakerdata() {
  matchmakerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameSession::matchmakerdata() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
  return matchmakerdata_.GetNoArena();
}
inline void GameSession::set_matchmakerdata(const ::std::string& value) {
  
  matchmakerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
}
#if LANG_CXX11
inline void GameSession::set_matchmakerdata(::std::string&& value) {
  
  matchmakerdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
}
#endif
inline void GameSession::set_matchmakerdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  matchmakerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
}
inline void GameSession::set_matchmakerdata(const char* value, size_t size) {
  
  matchmakerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
}
inline ::std::string* GameSession::mutable_matchmakerdata() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
  return matchmakerdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameSession::release_matchmakerdata() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
  
  return matchmakerdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSession::set_allocated_matchmakerdata(::std::string* matchmakerdata) {
  if (matchmakerdata != NULL) {
    
  } else {
    
  }
  matchmakerdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matchmakerdata);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.matchmakerData)
}

// string dnsName = 11;
inline void GameSession::clear_dnsname() {
  dnsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameSession::dnsname() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
  return dnsname_.GetNoArena();
}
inline void GameSession::set_dnsname(const ::std::string& value) {
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
}
#if LANG_CXX11
inline void GameSession::set_dnsname(::std::string&& value) {
  
  dnsname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
}
#endif
inline void GameSession::set_dnsname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
}
inline void GameSession::set_dnsname(const char* value, size_t size) {
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
}
inline ::std::string* GameSession::mutable_dnsname() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
  return dnsname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameSession::release_dnsname() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
  
  return dnsname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameSession::set_allocated_dnsname(::std::string* dnsname) {
  if (dnsname != NULL) {
    
  } else {
    
  }
  dnsname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dnsname);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameSession.dnsName)
}

// -------------------------------------------------------------------

// GameProperty

// string key = 1;
inline void GameProperty::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameProperty::key() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
  return key_.GetNoArena();
}
inline void GameProperty::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
#if LANG_CXX11
inline void GameProperty::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
#endif
inline void GameProperty::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
inline void GameProperty::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}
inline ::std::string* GameProperty::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameProperty::release_key() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameProperty::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.key)
}

// string value = 2;
inline void GameProperty::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GameProperty::value() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
  return value_.GetNoArena();
}
inline void GameProperty::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
#if LANG_CXX11
inline void GameProperty::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
#endif
inline void GameProperty::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
inline void GameProperty::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}
inline ::std::string* GameProperty::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameProperty::release_value() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameProperty::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.GameProperty.value)
}

// -------------------------------------------------------------------

// PlayerSession

// string playerSessionId = 1;
inline void PlayerSession::clear_playersessionid() {
  playersessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSession::playersessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
  return playersessionid_.GetNoArena();
}
inline void PlayerSession::set_playersessionid(const ::std::string& value) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
#if LANG_CXX11
inline void PlayerSession::set_playersessionid(::std::string&& value) {
  
  playersessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
#endif
inline void PlayerSession::set_playersessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
inline void PlayerSession::set_playersessionid(const char* value, size_t size) {
  
  playersessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}
inline ::std::string* PlayerSession::mutable_playersessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
  return playersessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSession::release_playersessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
  
  return playersessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_playersessionid(::std::string* playersessionid) {
  if (playersessionid != NULL) {
    
  } else {
    
  }
  playersessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playersessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerSessionId)
}

// string playerId = 2;
inline void PlayerSession::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSession::playerid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
  return playerid_.GetNoArena();
}
inline void PlayerSession::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
#if LANG_CXX11
inline void PlayerSession::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
#endif
inline void PlayerSession::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
inline void PlayerSession::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}
inline ::std::string* PlayerSession::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSession::release_playerid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerId)
}

// string gameSessionId = 3;
inline void PlayerSession::clear_gamesessionid() {
  gamesessionid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSession::gamesessionid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
  return gamesessionid_.GetNoArena();
}
inline void PlayerSession::set_gamesessionid(const ::std::string& value) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
#if LANG_CXX11
inline void PlayerSession::set_gamesessionid(::std::string&& value) {
  
  gamesessionid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
#endif
inline void PlayerSession::set_gamesessionid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
inline void PlayerSession::set_gamesessionid(const char* value, size_t size) {
  
  gamesessionid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}
inline ::std::string* PlayerSession::mutable_gamesessionid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
  return gamesessionid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSession::release_gamesessionid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
  
  return gamesessionid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_gamesessionid(::std::string* gamesessionid) {
  if (gamesessionid != NULL) {
    
  } else {
    
  }
  gamesessionid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gamesessionid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.gameSessionId)
}

// string fleetId = 4;
inline void PlayerSession::clear_fleetid() {
  fleetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSession::fleetid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
  return fleetid_.GetNoArena();
}
inline void PlayerSession::set_fleetid(const ::std::string& value) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
#if LANG_CXX11
inline void PlayerSession::set_fleetid(::std::string&& value) {
  
  fleetid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
#endif
inline void PlayerSession::set_fleetid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
inline void PlayerSession::set_fleetid(const char* value, size_t size) {
  
  fleetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}
inline ::std::string* PlayerSession::mutable_fleetid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
  return fleetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSession::release_fleetid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
  
  return fleetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_fleetid(::std::string* fleetid) {
  if (fleetid != NULL) {
    
  } else {
    
  }
  fleetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fleetid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.fleetId)
}

// string ipAddress = 5;
inline void PlayerSession::clear_ipaddress() {
  ipaddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSession::ipaddress() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
  return ipaddress_.GetNoArena();
}
inline void PlayerSession::set_ipaddress(const ::std::string& value) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
#if LANG_CXX11
inline void PlayerSession::set_ipaddress(::std::string&& value) {
  
  ipaddress_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
#endif
inline void PlayerSession::set_ipaddress(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
inline void PlayerSession::set_ipaddress(const char* value, size_t size) {
  
  ipaddress_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}
inline ::std::string* PlayerSession::mutable_ipaddress() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
  return ipaddress_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSession::release_ipaddress() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
  
  return ipaddress_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_ipaddress(::std::string* ipaddress) {
  if (ipaddress != NULL) {
    
  } else {
    
  }
  ipaddress_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipaddress);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.ipAddress)
}

// string status = 6;
inline void PlayerSession::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSession::status() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
  return status_.GetNoArena();
}
inline void PlayerSession::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
#if LANG_CXX11
inline void PlayerSession::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
#endif
inline void PlayerSession::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
inline void PlayerSession::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}
inline ::std::string* PlayerSession::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSession::release_status() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.status)
}

// int64 creationTime = 7;
inline void PlayerSession::clear_creationtime() {
  creationtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerSession::creationtime() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.creationTime)
  return creationtime_;
}
inline void PlayerSession::set_creationtime(::google::protobuf::int64 value) {
  
  creationtime_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.creationTime)
}

// int64 terminationTime = 8;
inline void PlayerSession::clear_terminationtime() {
  terminationtime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 PlayerSession::terminationtime() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.terminationTime)
  return terminationtime_;
}
inline void PlayerSession::set_terminationtime(::google::protobuf::int64 value) {
  
  terminationtime_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.terminationTime)
}

// int32 port = 9;
inline void PlayerSession::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 PlayerSession::port() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.port)
  return port_;
}
inline void PlayerSession::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.port)
}

// string playerData = 10;
inline void PlayerSession::clear_playerdata() {
  playerdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSession::playerdata() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
  return playerdata_.GetNoArena();
}
inline void PlayerSession::set_playerdata(const ::std::string& value) {
  
  playerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
#if LANG_CXX11
inline void PlayerSession::set_playerdata(::std::string&& value) {
  
  playerdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
#endif
inline void PlayerSession::set_playerdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
inline void PlayerSession::set_playerdata(const char* value, size_t size) {
  
  playerdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}
inline ::std::string* PlayerSession::mutable_playerdata() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
  return playerdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSession::release_playerdata() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
  
  return playerdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_playerdata(::std::string* playerdata) {
  if (playerdata != NULL) {
    
  } else {
    
  }
  playerdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerdata);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.playerData)
}

// string dnsName = 11;
inline void PlayerSession::clear_dnsname() {
  dnsname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSession::dnsname() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
  return dnsname_.GetNoArena();
}
inline void PlayerSession::set_dnsname(const ::std::string& value) {
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
}
#if LANG_CXX11
inline void PlayerSession::set_dnsname(::std::string&& value) {
  
  dnsname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
}
#endif
inline void PlayerSession::set_dnsname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
}
inline void PlayerSession::set_dnsname(const char* value, size_t size) {
  
  dnsname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
}
inline ::std::string* PlayerSession::mutable_dnsname() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
  return dnsname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSession::release_dnsname() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
  
  return dnsname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSession::set_allocated_dnsname(::std::string* dnsname) {
  if (dnsname != NULL) {
    
  } else {
    
  }
  dnsname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dnsname);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.PlayerSession.dnsName)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Player

// string playerId = 1;
inline void Player::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Player::playerid() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
  return playerid_.GetNoArena();
}
inline void Player::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
}
#if LANG_CXX11
inline void Player::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
}
#endif
inline void Player::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
}
inline void Player::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
}
inline ::std::string* Player::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_playerid() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.Player.playerId)
}

// map<string, .com.amazon.whitewater.auxproxy.pbuffer.AttributeValue> playerAttributes = 2;
inline int Player::playerattributes_size() const {
  return playerattributes_.size();
}
inline void Player::clear_playerattributes() {
  playerattributes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >&
Player::playerattributes() const {
  // @@protoc_insertion_point(field_map:com.amazon.whitewater.auxproxy.pbuffer.Player.playerAttributes)
  return playerattributes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::com::amazon::whitewater::auxproxy::pbuffer::AttributeValue >*
Player::mutable_playerattributes() {
  // @@protoc_insertion_point(field_mutable_map:com.amazon.whitewater.auxproxy.pbuffer.Player.playerAttributes)
  return playerattributes_.MutableMap();
}

// string team = 3;
inline void Player::clear_team() {
  team_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Player::team() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
  return team_.GetNoArena();
}
inline void Player::set_team(const ::std::string& value) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
}
#if LANG_CXX11
inline void Player::set_team(::std::string&& value) {
  
  team_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
}
#endif
inline void Player::set_team(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
}
inline void Player::set_team(const char* value, size_t size) {
  
  team_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
}
inline ::std::string* Player::mutable_team() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
  return team_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Player::release_team() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
  
  return team_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_team(::std::string* team) {
  if (team != NULL) {
    
  } else {
    
  }
  team_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.Player.team)
}

// map<string, int32> latencyInMs = 4;
inline int Player::latencyinms_size() const {
  return latencyinms_.size();
}
inline void Player::clear_latencyinms() {
  latencyinms_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >&
Player::latencyinms() const {
  // @@protoc_insertion_point(field_map:com.amazon.whitewater.auxproxy.pbuffer.Player.latencyInMs)
  return latencyinms_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::int32 >*
Player::mutable_latencyinms() {
  // @@protoc_insertion_point(field_mutable_map:com.amazon.whitewater.auxproxy.pbuffer.Player.latencyInMs)
  return latencyinms_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AttributeValue

// int32 type = 1;
inline void AttributeValue::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 AttributeValue::type() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.type)
  return type_;
}
inline void AttributeValue::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.type)
}

// string S = 2;
inline void AttributeValue::clear_s() {
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttributeValue::s() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
  return s_.GetNoArena();
}
inline void AttributeValue::set_s(const ::std::string& value) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
}
#if LANG_CXX11
inline void AttributeValue::set_s(::std::string&& value) {
  
  s_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
}
#endif
inline void AttributeValue::set_s(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
}
inline void AttributeValue::set_s(const char* value, size_t size) {
  
  s_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
}
inline ::std::string* AttributeValue::mutable_s() {
  
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
  return s_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttributeValue::release_s() {
  // @@protoc_insertion_point(field_release:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
  
  return s_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttributeValue::set_allocated_s(::std::string* s) {
  if (s != NULL) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.S)
}

// double N = 3;
inline void AttributeValue::clear_n() {
  n_ = 0;
}
inline double AttributeValue::n() const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.N)
  return n_;
}
inline void AttributeValue::set_n(double value) {
  
  n_ = value;
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.N)
}

// repeated string SL = 4;
inline int AttributeValue::sl_size() const {
  return sl_.size();
}
inline void AttributeValue::clear_sl() {
  sl_.Clear();
}
inline const ::std::string& AttributeValue::sl(int index) const {
  // @@protoc_insertion_point(field_get:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  return sl_.Get(index);
}
inline ::std::string* AttributeValue::mutable_sl(int index) {
  // @@protoc_insertion_point(field_mutable:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  return sl_.Mutable(index);
}
inline void AttributeValue::set_sl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  sl_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AttributeValue::set_sl(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  sl_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AttributeValue::set_sl(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
inline void AttributeValue::set_sl(int index, const char* value, size_t size) {
  sl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
inline ::std::string* AttributeValue::add_sl() {
  // @@protoc_insertion_point(field_add_mutable:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  return sl_.Add();
}
inline void AttributeValue::add_sl(const ::std::string& value) {
  sl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
#if LANG_CXX11
inline void AttributeValue::add_sl(::std::string&& value) {
  sl_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
#endif
inline void AttributeValue::add_sl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  sl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
inline void AttributeValue::add_sl(const char* value, size_t size) {
  sl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AttributeValue::sl() const {
  // @@protoc_insertion_point(field_list:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  return sl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AttributeValue::mutable_sl() {
  // @@protoc_insertion_point(field_mutable_list:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SL)
  return &sl_;
}

// map<string, double> SDM = 5;
inline int AttributeValue::sdm_size() const {
  return sdm_.size();
}
inline void AttributeValue::clear_sdm() {
  sdm_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
AttributeValue::sdm() const {
  // @@protoc_insertion_point(field_map:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDM)
  return sdm_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
AttributeValue::mutable_sdm() {
  // @@protoc_insertion_point(field_mutable_map:com.amazon.whitewater.auxproxy.pbuffer.AttributeValue.SDM)
  return sdm_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace pbuffer
}  // namespace auxproxy
}  // namespace whitewater
}  // namespace amazon
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status>() {
  return ::com::amazon::whitewater::auxproxy::pbuffer::Response_Status_descriptor();
}
template <> struct is_proto_enum< ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status>() {
  return ::com::amazon::whitewater::auxproxy::pbuffer::GameLiftResponse_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sdk_2eproto__INCLUDED
